/* -------------------------------------------------
 *  src/api/api.js
 *  â€“ istanza Axios pre-configurata + intercettori
 * ------------------------------------------------*/
import axios from 'axios';
import { toast } from 'react-toastify';

const LS_KEY_TOKEN = 'token';          // â†³ chiave unica per il bearer
const API_BASE_URL = 'http://localhost:3001'; // JSON-Server locale

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  1. Crea lâ€™istanza
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const api = axios.create({ baseURL: API_BASE_URL });

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  2. Interceptor REQUEST â€“ allega il token
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem(LS_KEY_TOKEN);
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  3. Interceptor RESPONSE â€“ gestione errori
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      const { status } = error.response;

      switch (status) {
        case 401:
          toast.error('Autenticazione fallita. Accedi di nuovo.');
          break;
        case 404:
          toast.error('Risorsa non trovata.');
          break;
        case 500:
          toast.error('Errore del server. Riprova piÃ¹ tardi.');
          break;
        default:
          toast.error(`Errore: ${error.response.statusText || status}`);
      }
    } else if (error.request) {
      toast.error(
        'Nessuna risposta dal server. Controlla la connessione o se il server API Ã¨ attivo.'
      );
    } else {
      toast.error(`Errore: ${error.message}`);
    }
    return Promise.reject(error);
  }
);

export default api;
// src/App.jsx
import React, { Suspense, lazy } from 'react';
import { Routes, Route } from 'react-router-dom';
import { ThemeProvider } from 'styled-components';
import { Provider } from 'react-redux';
import { ToastContainer } from 'react-toastify';

import GlobalStyle from './styles/GlobalStyle';
import theme from './styles/theme';
import store from './store/store';

import SkipNav from './components/layout/SkipNav';
import Navbar from './components/layout/Navbar';
import Footer from './components/layout/Footer';
import PrivateRoute from './components/auth/PrivateRoute';

// Pagine lazy
const HomePage      = lazy(() => import('./pages/HomePage'));
const CatalogPage   = lazy(() => import('./pages/CatalogPage'));
const ProductPage   = lazy(() => import('./pages/ProductPage'));
const CartPage      = lazy(() => import('./pages/CartPage'));
const WishlistPage  = lazy(() => import('./pages/WishlistPage'));
const LoginPage     = lazy(() => import('./pages/LoginPage'));
const RegisterPage  = lazy(() => import('./pages/RegisterPage'));
const ProfilePage   = lazy(() => import('./pages/ProfilePage'));
const CheckoutPage  = lazy(() => import('./pages/checkout/CheckoutPage'));
const SuccessPage   = lazy(() => import('./pages/checkout/SuccessPage'));
const AdminPage     = lazy(() => import('./pages/AdminPage'));
const AboutPage     = lazy(() => import('./pages/AboutPage'));
const ContactPage   = lazy(() => import('./pages/ContactPage'));
const NotFoundPage  = lazy(() => import('./pages/NotFoundPage'));
// â†“ lazy-load della nuova Policy page
const PolicyPage    = lazy(() => import('./pages/Policy'));

function App() {
  return (
    <Provider store={store}>
      <ThemeProvider theme={theme}>
        <GlobalStyle />
        <SkipNav />
        <Navbar />
        <main id="main-content" style={{ flex: 1 }}>
          <Suspense fallback={<p>Caricamentoâ€¦</p>}>
            <Routes>
              <Route path="/" element={<HomePage />} />
              <Route path="/catalog" element={<CatalogPage />} />
              <Route path="/product/:id" element={<ProductPage />} />
              <Route path="/cart" element={<CartPage />} />

              {/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ROTTE PROTETTE â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */}
              <Route
                path="/wishlist"
                element={
                  <PrivateRoute>
                    <WishlistPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/profile"
                element={
                  <PrivateRoute>
                    <ProfilePage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/checkout/*"
                element={
                  <PrivateRoute>
                    <CheckoutPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/success"
                element={
                  <PrivateRoute>
                    <SuccessPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/admin/*"
                element={
                  <PrivateRoute>
                    <AdminPage />
                  </PrivateRoute>
                }
              />
              {/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */}

              <Route path="/login" element={<LoginPage />} />
              <Route path="/register" element={<RegisterPage />} />
              <Route path="/about" element={<AboutPage />} />
              <Route path="/contact" element={<ContactPage />} />

              {/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ NUOVA ROUTE POLICY â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */}
              <Route path="/policy" element={<PolicyPage />} />

              {/* 404 fallback */}
              <Route path="*" element={<NotFoundPage />} />
            </Routes>
          </Suspense>
        </main>
        <Footer />
        <ToastContainer position="bottom-right" theme="dark" />
      </ThemeProvider>
    </Provider>
  );
}

export default App;
import { createGlobalStyle } from 'styled-components'

const GlobalStyle = createGlobalStyle`
  /* Reset base */
  *, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html, body, #root {
    height: 100%;
  }

  /* Font e colori di background/text dal tema */
  body {
    font-family: 'Arial', sans-serif;
    background: ${({ theme }) => theme.colors.background};
    color: ${({ theme }) => theme.colors.text};
    line-height: 1.6;
  }

  /* Link */
  a {
    color: inherit;
    text-decoration: none;
  }

  /* Pulsanti */
  button {
    font-family: inherit;
    cursor: pointer;
  }

  /* Inputs e textarea */
  input, textarea, select {
    font-family: inherit;
    font-size: inherit;
  }
`

export default GlobalStyle
import React from 'react';
import styled from 'styled-components';

const Card = styled.div`
  background: ${({ theme }) => theme.colors.surface};
  padding: ${({ theme }) => theme.spacing(3)};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: ${({ theme }) => theme.shadow};
  text-align: center;
  flex: 1;
  min-width: 200px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
`;

const CardTitle = styled.h4`
  margin-top: 0;
  margin-bottom: ${({ theme }) => theme.spacing(1)};
  color: ${({ theme }) => theme.colors.textLight};
`;

const CardValue = styled.p`
  font-size: 2.5em;
  font-weight: bold;
  color: ${({ theme }) => theme.colors.primary};
  margin: 0;
`;

const CardIcon = styled.span`
  font-size: 2em;
  margin-bottom: ${({ theme }) => theme.spacing(1)};
  color: ${({ theme }) => theme.colors.textLight};
`;

/**
 * Componente Card per le statistiche Admin.
 *
 * @param {string} title - Titolo della card (es. "Totale Ordini").
 * @param {string|number} value - Valore da visualizzare (es. "123").
 * @param {string} [icon] - Icona opzionale da mostrare.
 */
export default function AdminCard({ title, value, icon }) {
  return (
    <Card>
      {icon && <CardIcon>{icon}</CardIcon>}
      <CardTitle>{title}</CardTitle>
      <CardValue>{value}</CardValue>
    </Card>
  );
}
import React from 'react';
import styled from 'styled-components';
import Button from '../ui/Button'; // Assicurati che il percorso sia corretto

const TableContainer = styled.div`
  width: 100%;
  overflow-x: auto;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  margin-top: ${({ theme }) => theme.spacing(2)};

  th, td {
    padding: ${({ theme }) => theme.spacing(1.5)};
    border-bottom: 1px solid ${({ theme }) => theme.colors.surfaceDark};
    text-align: left;
    white-space: nowrap; /* Evita il wrap del testo */
  }

  th {
    background: ${({ theme }) => theme.colors.surfaceLight};
    font-weight: bold;
    color: ${({ theme }) => theme.colors.textLight};
  }

  tr:hover {
    background: ${({ theme }) => theme.colors.surfaceDark};
  }

  td:last-child {
    display: flex;
    gap: ${({ theme }) => theme.spacing(1)};
    align-items: center;
  }
`;

const EmptyMessage = styled.p`
  text-align: center;
  padding: ${({ theme }) => theme.spacing(3)};
  color: ${({ theme }) => theme.colors.textLight};
`;

/**
 * Componente Tabella Generica per l'Admin.
 *
 * @param {Object[]} columns - Array di oggetti { key: string, header: string }.
 * @param {Object[]} data - Array di oggetti contenenti i dati delle righe.
 * @param {Object[]} actions - Array di oggetti { label: string, onClick: Function(item) }.
 */
export default function AdminTable({ columns, data, rowKey, actions = [] }) {
  if (!data || data.length === 0) {
    return <EmptyMessage>Nessun dato da mostrare.</EmptyMessage>;
  }

  return (
    <TableContainer>
      <Table>
        <thead>
          <tr>
            {columns.map(col => (
              <th key={col.key}>{col.header}</th>
            ))}
            {actions.length > 0 && <th>Azioni</th>}
          </tr>
        </thead>
        <tbody>
          {data.map(item => (
            <tr key={item[rowKey]}>
              {columns.map(col => (
                <td key={`${item[rowKey]}-${col.key}`}>
                  {col.render ? col.render(item) : item[col.key]}
                </td>
              ))}
              {actions.length > 0 && (
                <td>
                  {actions.map(action => (
                    <Button
                      key={`${item[rowKey]}-${action.label}`}
                      onClick={() => action.onClick(item)}
                      small // Supponendo che il tuo Button abbia una prop 'small'
                    >
                      {action.label}
                    </Button>
                  ))}
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </Table>
    </TableContainer>
  );
}
import React from 'react';
import styled from 'styled-components';

const StyledSelect = styled.select`
  padding: ${({ theme }) => theme.spacing(0.5)};
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 1px solid ${({ theme }) => theme.colors.border};
  background: ${({ theme }) => theme.colors.background};
  color: ${({ theme }) => theme.colors.text};
  cursor: pointer;
`;

const STATUS_OPTIONS = ['pending', 'shipped', 'delivered', 'cancelled'];

/**
 * Dropdown per la selezione dello stato dell'ordine.
 *
 * @param {string} orderId - ID dell'ordine.
 * @param {string} currentStatus - Stato attuale dell'ordine.
 * @param {Function} onStatusChange - Callback da eseguire al cambio di stato.
 */
export default function OrderStatusDropdown({ orderId, currentStatus, onStatusChange }) {
  const handleChange = (e) => {
    onStatusChange(orderId, e.target.value);
  };

  return (
    <StyledSelect value={currentStatus} onChange={handleChange}>
      {STATUS_OPTIONS.map(status => (
        <option key={status} value={status}>
          {status.charAt(0).toUpperCase() + status.slice(1)} {/* Capitalizza la prima lettera */}
        </option>
      ))}
    </StyledSelect>
  );
}
import React, { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import styled from 'styled-components';
import Button from '../ui/Button';
import Input from '../ui/Input';

const FormContainer = styled.form`
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(2)};
  padding: ${({ theme }) => theme.spacing(3)};
  background: ${({ theme }) => theme.colors.surface};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: ${({ theme }) => theme.shadow};
  margin-bottom: ${({ theme }) => theme.spacing(4)};
`;

const ErrorText = styled.span`
  color: ${({ theme }) => theme.colors.error};
  font-size: 0.8em;
  margin-top: -${({ theme }) => theme.spacing(1)};
  margin-bottom: ${({ theme }) => theme.spacing(0.5)};
`;

const Select = styled.select`
  padding: ${({ theme }) => theme.spacing(1)};
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 1px solid ${({ theme }) => theme.colors.border};
  background: ${({ theme }) => theme.colors.background};
  color: ${({ theme }) => theme.colors.text};
`;

const CATEGORIES = ['Motore', 'Carrozzeria', 'Accessori', 'Detersivi', 'Utensili', 'Elettrici'];
const BRANDS = [
  { id: 1, name: 'Polini' },
  { id: 2, name: 'Malossi' },
  { id: 3, name: 'Piaggio' },
  { id: 4, name: 'Yamaha' },
  { id: 5, name: 'Aprilia' },
];

const schema = yup.object({
  title: yup.string().required('Il nome Ã¨ obbligatorio'),
  description: yup.string().required('La descrizione Ã¨ obbligatoria'),
  price: yup.number().typeError('Il prezzo deve essere un numero').min(0, 'Il prezzo non puÃ² essere negativo').required('Il prezzo Ã¨ obbligatorio'),
  stock: yup.number().typeError('Lo stock deve essere un numero').min(0, 'Lo stock non puÃ² essere negativo').required('Lo stock Ã¨ obbligatorio'),
  category: yup.string().oneOf(CATEGORIES, 'Categoria non valida').required('La categoria Ã¨ obbligatoria'),
  brandId: yup.number().oneOf(BRANDS.map(b => b.id), 'Brand non valido').required('Il brand Ã¨ obbligatorio'),
  images: yup.array().of(yup.string().url('L\'URL dell\'immagine non Ã¨ valido')).min(1, 'Almeno un\'immagine Ã¨ obbligatoria'),
});

/**
 * Modulo per aggiungere o modificare un prodotto.
 *
 * @param {Object} [defaultValues] - Dati del prodotto da pre-compilare per la modifica.
 * @param {Function} onSubmitForm - Callback da eseguire al submit del form.
 * @param {Function} onCancel - Callback per annullare la modifica.
 */
export default function ProductForm({ defaultValues, onSubmitForm, onCancel }) {
  const { register, handleSubmit, reset, formState: { errors } } = useForm({
    resolver: yupResolver(schema),
    defaultValues: { ...defaultValues, images: defaultValues?.images || [''] }
  });

  useEffect(() => {
    reset({ ...defaultValues, images: defaultValues?.images || [''] });
  }, [defaultValues, reset]);

  const handleAddImageField = () => {
    reset(prev => ({ ...prev, images: [...prev.images, ''] }));
  };

  const handleRemoveImageField = (index) => {
    reset(prev => ({ ...prev, images: prev.images.filter((_, i) => i !== index) }));
  };

  const onSubmit = (data) => {
    onSubmitForm(data);
  };

  return (
    <FormContainer onSubmit={handleSubmit(onSubmit)} noValidate>
      <h3>{defaultValues ? 'Modifica Prodotto' : 'Aggiungi Nuovo Prodotto'}</h3>

      <Input label="Nome Prodotto" placeholder="Nome del prodotto" {...register('title')} />
      {errors.title && <ErrorText>{errors.title.message}</ErrorText>}

      <Input label="Descrizione" placeholder="Descrizione dettagliata" as="textarea" rows="3" {...register('description')} />
      {errors.description && <ErrorText>{errors.description.message}</ErrorText>}

      <Input label="Prezzo (in centesimi)" type="number" placeholder="12345 (es. 123.45â‚¬)" {...register('price')} />
      {errors.price && <ErrorText>{errors.price.message}</ErrorText>}

      <Input label="Stock Disponibile" type="number" placeholder="QuantitÃ  in magazzino" {...register('stock')} />
      {errors.stock && <ErrorText>{errors.stock.message}</ErrorText>}

      <label>Categoria</label>
      <Select {...register('category')}>
        <option value="">Seleziona una categoria</option>
        {CATEGORIES.map(cat => <option key={cat} value={cat}>{cat}</option>)}
      </Select>
      {errors.category && <ErrorText>{errors.category.message}</ErrorText>}

      <label>Brand</label>
      <Select {...register('brandId')}>
        <option value="">Seleziona un brand</option>
        {BRANDS.map(brand => <option key={brand.id} value={brand.id}>{brand.name}</option>)}
      </Select>
      {errors.brandId && <ErrorText>{errors.brandId.message}</ErrorText>}

      <label>Immagini (URL)</label>
      {Array.isArray(errors.images) && errors.images.length > 0 && errors.images?.message && (
        <ErrorText>{errors.images?.message}</ErrorText>
      )}
      {defaultValues?.images && defaultValues.images.map((_, index) => (
        <div key={index} style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
          <Input placeholder={`URL Immagine ${index + 1}`} {...register(`images.${index}`)} />
          {defaultValues.images.length > 1 && (
            <Button type="button" onClick={() => handleRemoveImageField(index)}>ðŸ—‘ï¸</Button>
          )}
        </div>
      ))}
      <Button type="button" onClick={handleAddImageField} style={{ alignSelf: 'flex-start' }}>
        + Aggiungi URL Immagine
      </Button>

      <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>
        <Button type="submit" primary>{defaultValues ? 'Aggiorna Prodotto' : 'Crea Prodotto'}</Button>
        {onCancel && <Button type="button" onClick={onCancel}>Annulla</Button>}
      </div>
    </FormContainer>
  );
}
import React from 'react';
import styled from 'styled-components';

const StyledSelect = styled.select`
  padding: ${({ theme }) => theme.spacing(0.5)};
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 1px solid ${({ theme }) => theme.colors.border};
  background: ${({ theme }) => theme.colors.background};
  color: ${({ theme }) => theme.colors.text};
  cursor: pointer;
`;

const ROLE_OPTIONS = ['user', 'admin'];

/**
 * Dropdown per la selezione del ruolo utente.
 *
 * @param {string} userId - ID dell'utente.
 * @param {string} currentRole - Ruolo attuale dell'utente.
 * @param {Function} onRoleChange - Callback da eseguire al cambio di ruolo.
 */
export default function UserRoleSelect({ userId, currentRole, onRoleChange }) {
  const handleChange = (e) => {
    onRoleChange(userId, e.target.value);
  };

  return (
    <StyledSelect value={currentRole} onChange={handleChange}>
      {ROLE_OPTIONS.map(role => (
        <option key={role} value={role}>
          {role.charAt(0).toUpperCase() + role.slice(1)} {/* Capitalizza la prima lettera */}
        </option>
      ))}
    </StyledSelect>
  );
}
import React from 'react';
import { useSelector } from 'react-redux';
import { Navigate, Outlet, useLocation } from 'react-router-dom';
import Spinner from '../ui/Spinner';

export default function AdminRoute({ children }) {
  const { user, isAuthenticated, status } = useSelector((s) => s.auth);
  const location = useLocation();

  /* 1) Caricamento auth state  */
  if (status === 'loading') return <Spinner />;

  /* 2) Verifica permesso */
  const isAdmin = isAuthenticated && user?.role === 'admin';
  if (!isAdmin) {
    return (
      <Navigate
        to="/login"
        replace
        state={{
          from: location,
          message: 'Access denied. Administrator privileges required.',
        }}
      />
    );
  }

  return children ? children : <Outlet />;
}
import React from 'react';
import styled from 'styled-components';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useDispatch, useSelector } from 'react-redux';
import { loginUser } from '../../store/slices/authSlice';
import Button from '../ui/Button';
import Input from '../ui/Input';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Schema di validazione
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const loginSchema = yup.object().shape({
  email: yup
    .string()
    .email('Formato email non valido')
    .required('Email obbligatoria'),
  password: yup
    .string()
    .min(6, 'La password deve contenere almeno 6 caratteri')
    .required('Password obbligatoria'),
});

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Stili container
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const FormContainer = styled.form`
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(2)};
  max-width: 400px;
  margin: auto;
  padding: ${({ theme }) => theme.spacing(4)};
  background: ${({ theme }) => theme.colors.surfaceLight};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Component
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export default function LoginForm() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { status: authStatus, error: authError } = useSelector(
    (state) => state.auth,
  );

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(loginSchema),
  });

  const onSubmit = async (data) => {
    try {
      const result = await dispatch(loginUser(data)).unwrap();
      toast.success(`Benvenuto, ${result.user.email}!`);
      navigate('/');
    } catch (error) {
      // usiamo "error" per rispettare ESLint (no-unused-vars)
      const message =
        authError || error?.message || 'Login fallito. Verifica le credenziali.';
      toast.error(message);
    }
  };

  return (
    <FormContainer onSubmit={handleSubmit(onSubmit)} noValidate>
      <h2 style={{ textAlign: 'center', marginBottom: '1.5rem' }}>Login</h2>

      <Input
        label="Email"
        name="email"
        type="email"
        {...register('email')}
        error={errors.email?.message}
      />

      <Input
        label="Password"
        name="password"
        type="password"
        {...register('password')}
        error={errors.password?.message}
      />

      <Button type="submit" disabled={authStatus === 'loading'}>
        {authStatus === 'loading' ? 'Accesso in corso...' : 'Accedi'}
      </Button>

      {authError && (
        <p style={{ color: 'red', textAlign: 'center' }}>{authError}</p>
      )}
    </FormContainer>
  );
}
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { useSelector } from 'react-redux';
import { Navigate, useLocation } from 'react-router-dom';
import Spinner from '../ui/Spinner';

/**
 * Blocca le route protette finchÃ©:
 * 1. redux-persist ha completato la re-hydration
 * 2. lâ€™utente risulta autenticato
 */
export default function PrivateRoute({ children }) {
  const { isAuthenticated, status, _persist } = useSelector((s) => s.auth);
  const location = useLocation();
  const [rehydrated, setRehydrated] = useState(false);

  // redux-persist aggiunge _persist: { rehydrated: boolean }
  useEffect(() => {
    if (_persist?.rehydrated) setRehydrated(true);
  }, [_persist]);

  // Mostra loader finchÃ© non Ã¨ tutto pronto
  if (!rehydrated || status === 'loading') return <Spinner />;

  // Se non loggato â†’ redirect al login (salvando la destinazione)
  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Utente autenticato â†’ renderizza i figli
  return children;
}

PrivateRoute.propTypes = {
  children: PropTypes.node.isRequired,
};
import React from 'react';
import styled from 'styled-components';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useDispatch, useSelector } from 'react-redux';
import { registerUser } from '../../store/slices/authSlice';
import Button from '../ui/Button';
import Input from '../ui/Input';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Schema di validazione
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const registerSchema = yup.object().shape({
  firstName: yup.string().required('First Name is required'),
  lastName: yup.string().required('Last Name is required'),
  email: yup.string().email('Invalid email format').required('Email is required'),
  password: yup
    .string()
    .min(6, 'Password must be at least 6 characters')
    .required('Password is required'),
  confirmPassword: yup
    .string()
    .oneOf([yup.ref('password'), null], 'Passwords must match')
    .required('Confirm password is required'),
});

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Stili container
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const FormContainer = styled.form`
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(2)};
  max-width: 400px;
  margin: auto;
  padding: ${({ theme }) => theme.spacing(4)};
  background: ${({ theme }) => theme.colors.surfaceLight};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Component
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export default function RegisterForm() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { status: authStatus, error: authError } = useSelector((s) => s.auth);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({ resolver: yupResolver(registerSchema) });

  const onSubmit = async (data) => {
    try {
      const result = await dispatch(registerUser(data)).unwrap();
      toast.success(
        `Registration successful! Welcome, ${result.user.firstName}!`,
      );
      navigate('/login');
    } catch (error) {
      const message =
        authError || error?.message || 'Registration failed. Please try again.';
      toast.error(message);
    }
  };

  return (
    <FormContainer onSubmit={handleSubmit(onSubmit)} noValidate>
      <h2 style={{ textAlign: 'center', marginBottom: '1.5rem' }}>Register</h2>

      <Input
        label="First Name"
        name="firstName"
        {...register('firstName')}
        error={errors.firstName?.message}
      />
      <Input
        label="Last Name"
        name="lastName"
        {...register('lastName')}
        error={errors.lastName?.message}
      />
      <Input
        label="Email"
        name="email"
        type="email"
        {...register('email')}
        error={errors.email?.message}
      />
      <Input
        label="Password"
        name="password"
        type="password"
        {...register('password')}
        error={errors.password?.message}
      />
      <Input
        label="Confirm Password"
        name="confirmPassword"
        type="password"
        {...register('confirmPassword')}
        error={errors.confirmPassword?.message}
      />

      <Button type="submit" disabled={authStatus === 'loading'}>
        {authStatus === 'loading' ? 'Registering...' : 'Register'}
      </Button>

      {authError && (
        <p style={{ color: 'red', textAlign: 'center' }}>{authError}</p>
      )}
    </FormContainer>
  );
}
import React from 'react';
import styled from 'styled-components';
import { useDispatch } from 'react-redux';
import { changeQuantity, removeFromCart } from '../../store/slices/cartSlice'; // Azioni carrello
import Button from '../ui/Button';
import formatPrice from '../../utils/formatPrice';

/**
 * Componente CartItem.
 * Mostra un singolo articolo nel carrello, con dettagli, controllo quantitÃ  e pulsante di rimozione.
 */
const ItemContainer = styled.li`
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: ${({ theme }) => theme.colors.surfaceLight}; /* Sfondo articolo [9] */
  padding: ${({ theme }) => theme.spacing(2)};
  border-radius: ${({ theme }) => theme.borderRadius};
  margin-bottom: ${({ theme }) => theme.spacing(2)};
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
    gap: ${({ theme }) => theme.spacing(1)};
  }
`;

const ItemDetails = styled.div`
  display: flex;
  align-items: center;
  gap: ${({ theme }) => theme.spacing(2)};
  flex-grow: 1;
`;

const ItemImage = styled.img`
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: ${({ theme }) => theme.borderRadius};
`;

const ItemInfo = styled.div`
  display: flex;
  flex-direction: column;
`;

const ItemTitle = styled.h4`
  margin: 0;
  font-size: 1.1rem;
  color: ${({ theme }) => theme.colors.text};
`;

const ItemPrice = styled.p`
  margin: 0;
  font-size: 1rem;
  color: ${({ theme }) => theme.colors.textLight};
`;

const Controls = styled.div`
  display: flex;
  align-items: center;
  gap: ${({ theme }) => theme.spacing(2)};

  @media (max-width: 768px) {
    width: 100%;
    justify-content: space-between;
    margin-top: ${({ theme }) => theme.spacing(2)};
  }
`;

const QuantityInput = styled.input`
  width: 60px;
  padding: ${({ theme }) => theme.spacing(1)};
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 1px solid ${({ theme }) => theme.colors.surfaceDark};
  background-color: ${({ theme }) => theme.colors.surface};
  color: ${({ theme }) => theme.colors.text};
  text-align: center;

  &:focus {
    outline: 2px solid ${({ theme }) => theme.colors.primary};
    outline-offset: 2px;
  }
`;

const RemoveButton = styled(Button)`
  background-color: ${({ theme }) => theme.colors.danger}; /* Rosso per il tasto "Rimuovi" [9] */
  &:hover {
    background-color: #C62828; // Un rosso piÃ¹ scuro
  }
`;

const CartItem = ({ item }) => {
  const dispatch = useDispatch();

  const handleQuantityChange = (e) => {
    const newQuantity = Number(e.target.value);
    if (newQuantity >= 1) {
      dispatch(changeQuantity({ productId: item.id, quantity: newQuantity })); // Azione per cambiare quantitÃ  [73]
    }
  };

  const handleRemove = () => {
    dispatch(removeFromCart({ productId: item.id })); // Azione per rimuovere [73]
  };

  return (
    <ItemContainer>
      <ItemDetails>
        <ItemImage src={item.image} alt={item.title} />
        <ItemInfo>
          <ItemTitle>{item.title}</ItemTitle>
          <ItemPrice>{formatPrice(item.price)}</ItemPrice>
        </ItemInfo>
      </ItemDetails>
      <Controls>
        <QuantityInput
          type="number"
          min="1"
          value={item.quantity}
          onChange={handleQuantityChange}
          aria-label={`Change quantity for ${item.title}`}
        />
        <span>{formatPrice(item.price * item.quantity)}</span> {/* Subtotale per articolo */}
        <RemoveButton onClick={handleRemove}>Remove</RemoveButton>
      </Controls>
    </ItemContainer>
  );
};

export default CartItem;
import React from 'react';
import styled from 'styled-components';
import Button from '../ui/Button';
import { useNavigate } from 'react-router-dom';
import formatPrice from '../../utils/formatPrice';

/**
 * Componente CartSummary.
 * Mostra un riepilogo del carrello con subtotale, tasse e spedizione (simulati), e totale.
 */
const SummaryContainer = styled.div`
  background: ${({ theme }) => theme.colors.surfaceLight};
  padding: ${({ theme }) => theme.spacing(3)};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(1.5)};
  min-width: 280px;

  @media (max-width: 768px) {
    width: 100%;
  }
`;

const SummaryRow = styled.div`
  display: flex;
  justify-content: space-between;
  font-size: 1rem;
  color: ${({ theme }) => theme.colors.text};
`;

const TotalRow = styled(SummaryRow)`
  font-weight: bold;
  font-size: 1.3rem;
  border-top: 1px solid ${({ theme }) => theme.colors.surfaceDark};
  padding-top: ${({ theme }) => theme.spacing(1.5)};
  margin-top: ${({ theme }) => theme.spacing(1.5)};
`;

const CheckoutButton = styled(Button)`
  width: 100%;
  margin-top: ${({ theme }) => theme.spacing(2)};
`;

const CartSummary = ({ subtotal }) => {
  const navigate = useNavigate();

  // Simulazione tasse e spedizione [58]
  const taxes = subtotal * 0.05; // 5% di tasse
  const shipping = subtotal > 50000 ? 0 : 799; // Spedizione gratis sopra 50â‚¬ (in cent)
  const total = subtotal + taxes + shipping;

  const handleCheckout = () => {
    navigate('/checkout'); // Naviga alla pagina di checkout [76]
  };

  return (
    <SummaryContainer>
      <SummaryRow>
        <span>Subtotal:</span>
        <span>{formatPrice(subtotal)}</span>
      </SummaryRow>
      <SummaryRow>
        <span>Shipping:</span>
        <span>{shipping === 0 ? 'Free' : formatPrice(shipping)}</span>
      </SummaryRow>
      <SummaryRow>
        <span>Taxes (5%):</span>
        <span>{formatPrice(taxes)}</span>
      </SummaryRow>
      <TotalRow>
        <span>Total:</span>
        <span>{formatPrice(total)}</span>
      </TotalRow>
      <CheckoutButton onClick={handleCheckout} disabled={subtotal === 0}>
        Proceed to Checkout
      </CheckoutButton>
    </SummaryContainer>
  );
};

export default CartSummary;
// Form per i dati di pagamento

import React from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import styled from 'styled-components';
import Button from '../ui/Button';
import Input from '../ui/Input';
import { toast } from 'react-toastify';
import formatPrice from '../../utils/formatPrice';

/**
 * Schema di validazione per il form di pagamento con Yup
 */
const paymentSchema = yup.object().shape({
  cardName: yup.string().required('Name on card is required'),
  cardNumber: yup.string()
    .matches(/^\d{16}$/, 'Card number must be 16 digits')
    .required('Card number is required'),
  expiry: yup.string()
    .matches(/^(0[1-9]|1[0-2])\/\d{2}$/, 'Expiry date must be MM/YY')
    .required('Expiry date is required'),
  cvv: yup.string()
    .matches(/^\d{3,4}$/, 'CVV must be 3 or 4 digits')
    .required('CVV is required'),
});

/**
 * Stili del contenitore del form
 */
const FormContainer = styled.form`
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(2)};
  max-width: 600px;
  margin: auto;
  padding: ${({ theme }) => theme.spacing(4)};
  background: ${({ theme }) => theme.colors.surfaceLight};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
`;

const ButtonGroup = styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: ${({ theme }) => theme.spacing(3)};
`;

/**
 * Componente PaymentForm
 */
const PaymentForm = ({ onNext, onBack, total }) => {
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(paymentSchema),
  });

  const onSubmit = async (data) => {
    try {
      console.log('Payment Data:', data);
      toast.success(`Payment of ${formatPrice(total)} processed successfully!`);
      onNext();
    } catch {
      toast.error('Error processing payment.');
    }
  };

  return (
    <FormContainer onSubmit={handleSubmit(onSubmit)} noValidate>
      <Input
        label="Name on Card"
        name="cardName"
        {...register('cardName')}
        error={errors.cardName?.message}
      />
      <Input
        label="Card Number"
        name="cardNumber"
        {...register('cardNumber')}
        error={errors.cardNumber?.message}
      />
      <Input
        label="Expiry Date (MM/YY)"
        name="expiry"
        placeholder="MM/YY"
        {...register('expiry')}
        error={errors.expiry?.message}
      />
      <Input
        label="CVV"
        name="cvv"
        type="password"
        {...register('cvv')}
        error={errors.cvv?.message}
      />
      <ButtonGroup>
        <Button type="button" onClick={onBack}>Back</Button>
        <Button type="submit">Pay {formatPrice(total)}</Button>
      </ButtonGroup>
    </FormContainer>
  );
};

export default PaymentForm;
import React from 'react';
import styled from 'styled-components';
import Button from '../ui/Button';
import { useCart } from '../../hooks/useCart'; // Hook per accedere ai dati del carrello [76]
import formatPrice from '../../utils/formatPrice';
import { useDispatch } from 'react-redux';
import { clearCart } from '../../store/slices/cartSlice'; // Azione per svuotare il carrello [76]

/**
 * Componente Review.
 * Mostra un riepilogo finale dell'ordine prima della conferma.
 */
const ReviewContainer = styled.div`
  max-width: 600px;
  margin: auto;
  padding: ${({ theme }) => theme.spacing(4)};
  background: ${({ theme }) => theme.colors.surfaceLight};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(2)};
`;

const ItemRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid ${({ theme }) => theme.colors.surfaceDark};
  padding-bottom: ${({ theme }) => theme.spacing(1)};
  margin-bottom: ${({ theme }) => theme.spacing(1)};
  color: ${({ theme }) => theme.colors.text};
`;

const TotalRow = styled(ItemRow)`
  font-weight: bold;
  font-size: 1.2rem;
  border-bottom: none;
  padding-top: ${({ theme }) => theme.spacing(1)};
  margin-top: ${({ theme }) => theme.spacing(1)};
`;

const ButtonGroup = styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: ${({ theme }) => theme.spacing(3)};
`;

const Review = ({ onBack, onComplete }) => {
  const { items: cartItems, products, subtotal } = useCart(); // Accedi agli items del carrello e ai prodotti [76]
  const dispatch = useDispatch();

  // Calcola i dettagli degli articoli nel carrello per il riepilogo
  const details = Object.values(cartItems).map(({ productId, quantity }) => {
    const prod = products.find(p => p.id === productId);
    return {
      ...prod,
      quantity,
      itemTotal: prod.price * quantity,
    };
  });

  const handleCompleteOrder = () => {
    dispatch(clearCart()); // Svuota il carrello dopo l'ordine [76]
    onComplete(); // Passa alla pagina di successo
  };

  return (
    <ReviewContainer>
      <h2 style={{ textAlign: 'center', marginBottom: '1.5rem', color: 'inherit' }}>Order Review</h2>
      {details.map(item => (
        <ItemRow key={item.id}>
          <span>{item.title} x{item.quantity}</span>
          <span>{formatPrice(item.itemTotal)}</span>
        </ItemRow>
      ))}
      <TotalRow>
        <span>Total:</span>
        <span>{formatPrice(subtotal)}</span>
      </TotalRow>
      <ButtonGroup>
        <Button type="button" onClick={onBack}>Back</Button>
        <Button onClick={handleCompleteOrder}>Confirm Order</Button>
      </ButtonGroup>
    </ReviewContainer>
  );
};

export default Review;
import React from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import styled from 'styled-components';
import Button from '../ui/Button';
import Input from '../ui/Input';
import { toast } from 'react-toastify';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Schema di validazione
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const shippingSchema = yup.object().shape({
  fullName:   yup.string().required('Full name is required'),
  address:    yup.string().required('Address is required'),
  city:       yup.string().required('City is required'),
  postalCode: yup.string().required('Postal code is required'),
  phone:      yup.string().required('Phone number is required'),
});

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Styled components
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const FormContainer = styled.form`
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(2)};
  max-width: 600px;
  margin: auto;
  padding: ${({ theme }) => theme.spacing(4)};
  background: ${({ theme }) => theme.colors.surfaceLight};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
`;

const ButtonGroup = styled.div`
  display: flex;
  justify-content: flex-end;
  margin-top: ${({ theme }) => theme.spacing(3)};
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Component
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export default function ShippingForm({ onNext }) {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({ resolver: yupResolver(shippingSchema) });

  const onSubmit = async (data) => {
    try {
      // In un caso reale, qui potresti inviare o salvare i dati
      console.log('Shipping Data:', data);
      toast.success('Shipping information saved!');
      onNext(); // Avanza allo step successivo
    } catch (error) {
      toast.error(
        error?.message || 'Error saving shipping information.',
      );
    }
  };

  return (
    <FormContainer onSubmit={handleSubmit(onSubmit)} noValidate>
      <Input
        label="Full Name"
        name="fullName"
        {...register('fullName')}
        error={errors.fullName?.message}
      />
      <Input
        label="Address"
        name="address"
        {...register('address')}
        error={errors.address?.message}
      />
      <Input
        label="City"
        name="city"
        {...register('city')}
        error={errors.city?.message}
      />
      <Input
        label="Postal Code"
        name="postalCode"
        {...register('postalCode')}
        error={errors.postalCode?.message}
      />
      <Input
        label="Phone Number"
        name="phone"
        type="tel"
        {...register('phone')}
        error={errors.phone?.message}
      />

      <ButtonGroup>
        <Button type="submit">Next Step</Button>
      </ButtonGroup>
    </FormContainer>
  );
}
import React from 'react';
import styled from 'styled-components';

/**
 * Componente Stepper.
 * Mostra l'avanzamento in un processo multi-step (es. checkout).
 */
const StepperContainer = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: ${({ theme }) => theme.spacing(4)};
  padding: ${({ theme }) => theme.spacing(2)} 0;
  border-bottom: 1px solid ${({ theme }) => theme.colors.surfaceDark}; /* Linea di base [9] */

  @media (max-width: 768px) {
    flex-wrap: wrap; // Permette il wrap dei passaggi su schermi piccoli
    justify-content: center;
    gap: ${({ theme }) => theme.spacing(2)};
  }
`;

const StepItem = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  flex: 1; // Distribuisce lo spazio equamente

  // La linea di connessione tra i passi
  &:not(:first-child) {
    position: relative;
    &::before {
      content: '';
      position: absolute;
      width: 100%; // Copre lo spazio tra i cerchi
      height: 2px;
      background: ${({ theme, active }) => 
        active ? theme.colors.primary : theme.colors.surfaceLight}; /* Colore dinamico [9] */
      left: -50%; // Partenza dalla metÃ  del precedente
      top: 15px; // Allinea con il centro del cerchio
      z-index: -1; // Sotto il cerchio
    }
  }

  @media (max-width: 768px) {
    flex: none; // Rimuovi flex:1 su mobile per evitare deformazioni
    width: auto;
    &:not(:first-child) {
      &::before {
        display: none; // Rimuovi la linea su mobile
      }
    }
  }
`;

const StepCircle = styled.div`
  width: 35px;
  height: 35px;
  border-radius: 50%;
  background: ${({ theme, active }) => 
    active ? theme.colors.primary : theme.colors.surfaceDark}; /* Colore dinamico [9] */
  color: ${({ theme }) => theme.colors.onPrimary};
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  z-index: 1; // Sopra la linea
  margin-bottom: ${({ theme }) => theme.spacing(0.5)};
`;

const StepLabel = styled.span`
  font-size: 0.9rem;
  text-align: center;
  color: ${({ theme, active }) => 
    active ? theme.colors.primary : theme.colors.textLight};
`;

const Stepper = ({ steps, currentStep }) => {
  return (
    <StepperContainer 
      role="progressbar" 
      aria-valuenow={currentStep + 1} 
      aria-valuemin={1} 
      aria-valuemax={steps.length}
    >
      {steps.map((label, index) => (
        <StepItem key={index} active={index <= currentStep}>
          <StepCircle active={index <= currentStep}>{index + 1}</StepCircle>
          <StepLabel active={index <= currentStep}>{label}</StepLabel>
        </StepItem>
      ))}
    </StepperContainer>
  );
};

export default Stepper;
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { toast } from 'react-toastify';
import Calendar from 'react-calendar';

export default function ContactForm() {
  const [date, setDate] = useState(new Date());
  const { register, handleSubmit, reset } = useForm();

  const onSubmit = (data) => {
    const contactData = { ...data, appointmentDate: date.toISOString() };
    toast.success('Richiesta inviata con successo!');
    console.log('Contatto:', contactData);
    reset();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <label>Nome</label>
      <input {...register('name')} />

      <label>Email*</label>
      <input type="email" {...register('email', { required: true })} />

      <label>Telefono*</label>
      <input type="tel" {...register('phone', { required: true })} />

      <label>Messaggio</label>
      <textarea {...register('message')} />

      <label>Data appuntamento</label>
      <Calendar value={date} onChange={setDate} />

      <button type="submit">Invia</button>
    </form>
  );
}
import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import { useSelector } from 'react-redux';
import Skeleton from '../ui/Skeleton';

/**
 * Componente CategoryGrid.
 * Mostra le categorie principali in una griglia, con link al catalogo filtrato.
 */
const SectionContainer = styled.section`
  padding: ${({ theme }) => theme.spacing(4)};
  margin-top: ${({ theme }) => theme.spacing(4)};
`;

const SectionTitle = styled.h2`
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: ${({ theme }) => theme.spacing(4)};
  color: ${({ theme }) => theme.colors.text};
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: ${({ theme }) => theme.spacing(3)};
  justify-items: center;
`;

const CategoryCard = styled(Link)`
  background: ${({ theme }) => theme.colors.surface};
  padding: ${({ theme }) => theme.spacing(3)};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
  text-decoration: none;
  color: ${({ theme }) => theme.colors.text};
  transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 150px; // Altezza minima per le card
  
  &:hover {
    transform: translateY(-3px);
    background-color: ${({ theme }) => theme.colors.surfaceDark};
  }
`;

const CategoryName = styled.h3`
  font-size: 1.2rem;
  margin-top: ${({ theme }) => theme.spacing(1)};
  margin-bottom: 0;
`;

const CategoryGrid = () => {
  // Assumi che le categorie siano caricate nello slice products o in un categoriesSlice separato
  const { categories, status, error } = useSelector(state => state.products); // Prendiamo le categorie dallo store [70]

  if (status === 'loading') {
    return (
      <SectionContainer>
        <SectionTitle>Shop by Category</SectionTitle>
        <Grid>
          {[...Array(6)].map((_, i) => ( // Mostra 6 skeleton per le categorie
            <Skeleton key={i} width="180px" height="150px" />
          ))}
        </Grid>
      </SectionContainer>
    );
  }

  if (status === 'failed') {
    return (
      <SectionContainer>
        <SectionTitle>Shop by Category</SectionTitle>
        <p style={{ textAlign: 'center', color: 'red' }}>Error loading categories: {error}</p>
      </SectionContainer>
    );
  }

  if (categories.length === 0) {
    return null; // Non mostrare la sezione se non ci sono categorie
  }

  return (
    <SectionContainer>
      <SectionTitle>Shop by Category</SectionTitle>
      <Grid>
        {categories.map(category => (
          <CategoryCard key={category.id} to={`/catalog?category=${category.name}`}> {/* Link al catalogo filtrato per categoria [36] */}
            {/* Qui potresti aggiungere un'icona per la categoria */}
            <CategoryName>{category.name}</CategoryName>
          </CategoryCard>
        ))}
      </Grid>
    </SectionContainer>
  );
};

export default CategoryGrid;
import React from 'react';
import styled from 'styled-components';
import ProductCard from '../products/ProductCard'; // Per le singole schede prodotto
import Spinner from '../ui/Spinner'; // Per il caricamento
import Skeleton from '../ui/Skeleton'; // Per gli skeleton loader
import { useSelector } from 'react-redux';

/**
 * Componente FeaturedProducts.
 * Mostra una selezione di prodotti "in evidenza" dalla lista globale.
 */
const SectionContainer = styled.section`
  padding: ${({ theme }) => theme.spacing(4)};
  margin-top: ${({ theme }) => theme.spacing(4)};
`;

const SectionTitle = styled.h2`
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: ${({ theme }) => theme.spacing(4)};
  color: ${({ theme }) => theme.colors.text};
`;

const ProductsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: ${({ theme }) => theme.spacing(3)};
  justify-items: center;
`;

const FeaturedProducts = () => {
  // Prendiamo i prodotti dallo store Redux
  const { items: products, status, error } = useSelector(state => state.products);

  // Filtriamo solo i primi 4 prodotti come "in evidenza" (o una logica piÃ¹ complessa se presente) [16]
  const featured = products.slice(0, 4); 

  if (status === 'loading') {
    return (
      <SectionContainer>
        <SectionTitle>Featured Products</SectionTitle>
        <ProductsGrid>
          {[...Array(4)].map((_, i) => (
            <Skeleton key={i} width="250px" height="350px" /> // Skeleton per i prodotti [7]
          ))}
        </ProductsGrid>
      </SectionContainer>
    );
  }

  if (status === 'failed') {
    return (
      <SectionContainer>
        <SectionTitle>Featured Products</SectionTitle>
        <p style={{ textAlign: 'center', color: 'red' }}>Error loading featured products: {error}</p>
      </SectionContainer>
    );
  }

  if (featured.length === 0) {
    return (
      <SectionContainer>
        <SectionTitle>Featured Products</SectionTitle>
        <p style={{ textAlign: 'center', color: 'gray' }}>No featured products available at the moment.</p>
      </SectionContainer>
    );
  }

  return (
    <SectionContainer>
      <SectionTitle>Featured Products</SectionTitle>
      <ProductsGrid>
        {featured.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </ProductsGrid>
    </SectionContainer>
  );
};

export default FeaturedProducts;
import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';

/**
 * Componente HeroBanner per la Home Page.
 * Presenta un messaggio accattivante e una call-to-action.
 */
const BannerContainer = styled(motion.section)`
  background-image: url('/images/hero-scooter.jpg'); /* Immagine di sfondo (assicurati esista in public/images) [101] */
  background-size: cover;
  background-position: center;
  color: white;
  text-align: center;
  padding: ${({ theme }) => theme.spacing(8)} ${({ theme }) => theme.spacing(4)}; /* Ampio padding [9] */
  height: 400px; // Altezza fissa
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative; // Per il gradiente overlay

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5); // Overlay scuro per migliorare la leggibilitÃ  del testo
    z-index: 1;
  }
`;

const BannerContent = styled(motion.div)`
  position: relative;
  z-index: 2;
  max-width: 800px;
`;

const BannerTitle = styled.h1`
  font-size: 3.5rem;
  margin-bottom: ${({ theme }) => theme.spacing(2)};
  color: ${({ theme }) => theme.colors.onPrimary};
  text-shadow: 2px 2px 4px rgba(0,0,0,0.5); // Ombra per migliore visibilitÃ 
`;

const BannerSubtitle = styled.p`
  font-size: 1.5rem;
  margin-bottom: ${({ theme }) => theme.spacing(4)};
  color: ${({ theme }) => theme.colors.onPrimary};
  opacity: 0.9;
`;

const ShopNowButton = styled(Link)`
  background-color: ${({ theme }) => theme.colors.primary};
  color: ${({ theme }) => theme.colors.onPrimary};
  padding: ${({ theme }) => theme.spacing(1.5)} ${({ theme }) => theme.spacing(4)};
  border-radius: ${({ theme }) => theme.borderRadius};
  text-decoration: none;
  font-weight: bold;
  font-size: 1.1rem;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: ${({ theme }) => theme.colors.primaryDark || '#E65100'};
  }
`;

const HeroBanner = () => {
  return (
    <BannerContainer
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.8 }}
    >
      <BannerContent
        initial={{ y: 50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.3, duration: 0.6 }}
      >
        <BannerTitle>All You Need for Your Scooter</BannerTitle>
        <BannerSubtitle>Discover top-quality spare parts and accessories from trusted Italian brands.</BannerSubtitle>
        <ShopNowButton to="/catalog">Shop Now</ShopNowButton>
      </BannerContent>
    </BannerContainer>
  );
};

export default HeroBanner;
import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';

/* ---------- styled ---------- */
const FooterContainer = styled.footer`
  background: ${({ theme }) => theme.colors.surface};
  color: ${({ theme }) => theme.colors.textLight};
  padding: ${({ theme }) => theme.spacing(4)};
  text-align: center;
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
  margin-top: auto;          /* footer sempre in fondo */
`;

const FooterLinks = styled.ul`
  list-style: none;
  padding: 0;
  margin: ${({ theme }) => theme.spacing(2)} 0;
  display: flex;
  justify-content: center;
  gap: ${({ theme }) => theme.spacing(3)};
  flex-wrap: wrap;           /* migliore resa su mobile */
`;

const FooterLink = styled(Link)`
  color: ${({ theme }) => theme.colors.textLight};
  text-decoration: none;
  &:hover { color: ${({ theme }) => theme.colors.primary}; }
`;

/* ---------- componente ---------- */
export default function Footer() {
  const year = new Date().getFullYear();

  return (
    <FooterContainer>
      <p>Â© {year} Ridfix. All rights reserved.</p>

      <FooterLinks>
        <li><FooterLink to="/">Home</FooterLink></li>
        <li><FooterLink to="/catalog">Catalog</FooterLink></li>
        <li><FooterLink to="/about">About Us</FooterLink></li>
        <li><FooterLink to="/contact">Contact</FooterLink></li>
        {/* ðŸ†• link policy */}
        <li><FooterLink to="/policy">Privacy & Cookies</FooterLink></li>
      </FooterLinks>
    </FooterContainer>
  );
}
import React from 'react';
import { Link, NavLink } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import styled from 'styled-components';
import { logout } from '../../store/slices/authSlice';
import ThemeToggle from './ThemeToggle';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faShoppingCart,
  faUser,
  faSignInAlt,
  faSignOutAlt,
  faCog,
} from '@fortawesome/free-solid-svg-icons';

const NavContainer = styled.nav`
  background: ${({ theme }) => theme.colors.surface};
  color: ${({ theme }) => theme.colors.text};
  padding: ${({ theme }) => theme.spacing(2)} ${({ theme }) => theme.spacing(4)};
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
`;

const Brand = styled(Link)`
  font-size: 2rem;
  font-weight: bold;
  color: ${({ theme }) => theme.colors.primary};
  text-decoration: none;
`;

const NavLinks = styled.ul`
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
  gap: ${({ theme }) => theme.spacing(3)};
`;

const NavItem = styled(NavLink)`
  text-decoration: none;
  color: ${({ theme }) => theme.colors.text};
  padding: ${({ theme }) => theme.spacing(1)} 0;
  position: relative;

  &:hover {
    color: ${({ theme }) => theme.colors.primary};
  }

  &.active {
    color: ${({ theme }) => theme.colors.primary};
    font-weight: bold;
    &::after {
      content: '';
      position: absolute;
      left: 0;
      bottom: 0;
      width: 100%;
      height: 2px;
      background-color: ${({ theme }) => theme.colors.primary};
    }
  }
`;

const CartLink = styled(NavLink)`
  display: flex;
  align-items: center;
  gap: ${({ theme }) => theme.spacing(1)};
  color: ${({ theme }) => theme.colors.text};
  text-decoration: none;

  &:hover {
    color: ${({ theme }) => theme.colors.primary};
  }
`;

const CartBadge = styled.span`
  background-color: ${({ theme }) => theme.colors.danger};
  color: ${({ theme }) => theme.colors.onPrimary};
  border-radius: 50%;
  padding: ${({ theme }) => theme.spacing(0.5)} ${({ theme }) => theme.spacing(1)};
  font-size: 0.75rem;
  min-width: 24px;
  text-align: center;
`;

const AuthControls = styled.div`
  display: flex;
  align-items: center;
  gap: ${({ theme }) => theme.spacing(2)};
`;

const LogoutButton = styled.button`
  background: none;
  border: none;
  color: ${({ theme }) => theme.colors.text};
  cursor: pointer;
  font-size: 1rem;
  &:hover {
    color: ${({ theme }) => theme.colors.primary};
  }
`;

const Navbar = () => {
  const dispatch = useDispatch();
  const cartItemsCount = useSelector(state =>
    Object.values(state.cart.items || {}).reduce((sum, item) => sum + item.quantity, 0)
  );
  const user = useSelector(state => state.auth.user);

  const handleLogout = () => {
    dispatch(logout());
  };

  return (
    <NavContainer>
      <Brand to="/">Ridfix</Brand>
      <NavLinks>
        <li><NavItem to="/">Home</NavItem></li>
        <li><NavItem to="/catalog">Catalog</NavItem></li>
        <li><NavItem to="/about">About Us</NavItem></li>
        <li><NavItem to="/contact">Contact</NavItem></li>
        <li><NavItem to="/wishlist">Wishlist</NavItem></li>
      </NavLinks>
      <AuthControls>
        <ThemeToggle />
        <CartLink to="/cart">
          <FontAwesomeIcon icon={faShoppingCart} />
          {cartItemsCount > 0 && <CartBadge>{cartItemsCount}</CartBadge>}
        </CartLink>
        {user ? (
          <>
            <Link to="/profile" style={{ textDecoration: 'none', color: 'inherit' }}>
              <FontAwesomeIcon icon={faUser} /> {user.email}
            </Link>
            {user.role === 'admin' && (
              <Link to="/admin" style={{ textDecoration: 'none', color: 'inherit' }}>
                <FontAwesomeIcon icon={faCog} /> Admin
              </Link>
            )}
            <LogoutButton onClick={handleLogout}>
              <FontAwesomeIcon icon={faSignOutAlt} /> Logout
            </LogoutButton>
          </>
        ) : (
          <Link to="/login" style={{ textDecoration: 'none', color: 'inherit' }}>
            <FontAwesomeIcon icon={faSignInAlt} /> Login
          </Link>
        )}
      </AuthControls>
    </NavContainer>
  );
};

export default Navbar;
import React from 'react';
import styled from 'styled-components';

/**
 * Componente SkipNav per l'accessibilitÃ .
 * Permette agli utenti di tastiera di saltare la navigazione e andare direttamente al contenuto principale.
 */
const StyledSkipNav = styled.a`
  position: absolute;
  top: -999px;
  left: -999px;
  background-color: ${({ theme }) => theme.colors.primary}; /* Colore primario [9] */
  color: ${({ theme }) => theme.colors.onPrimary};
  padding: ${({ theme }) => theme.spacing(1)};
  z-index: 9999;
  text-decoration: none;

  &:focus {
    top: 0;
    left: 0;
    position: fixed; // Rende visibile quando in focus
    clip: auto;
  }
`;

const SkipNav = () => {
  return (
    <StyledSkipNav href="#main-content">
      Skip to main content
    </StyledSkipNav>
  );
};

export default SkipNav;
import React, { useState, useEffect } from 'react';

/**
 * Componente ThemeToggle
 * Permette di passare da tema chiaro a scuro e viceversa.
 * Salva la scelta in localStorage e applica la classe `dark` al tag <html>.
 */
function ThemeToggle() {
  // Inizializza il tema leggendo da localStorage o dalle preferenze di sistema
  const [dark, setDark] = useState(() => {
    if (localStorage.theme === 'dark') return true;
    if (localStorage.theme === 'light') return false;
    return window.matchMedia('(prefers-color-scheme: dark)').matches;
  });

  // Applica la classe 'dark' al <html> e aggiorna localStorage quando cambia il tema
  useEffect(() => {
    const root = document.documentElement;
    if (dark) {
      root.classList.add('dark');
      localStorage.theme = 'dark';
    } else {
      root.classList.remove('dark');
      localStorage.theme = 'light';
    }
  }, [dark]);

  // Inverte lo stato del tema
  const toggleTheme = () => setDark(prev => !prev);

  return (
    <button
      onClick={toggleTheme}
      className="ml-2 p-2 text-lg rounded transition bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700"
      aria-label="Toggle dark mode"
    >
      {dark ? 'ðŸŒ™' : 'â˜€ï¸'}
    </button>
  );
}

export default ThemeToggle;

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { useSelector } from 'react-redux';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Styled components
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const SidebarContainer = styled.aside`
  background: ${({ theme }) => theme.colors.surfaceLight};
  padding: ${({ theme }) => theme.spacing(3)};
  border-radius: ${({ theme }) => theme.borderRadius};
  width: 280px;
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(3)};

  @media (max-width: 768px) {
    width: 100%;
    order: 2; /* mobile: sidebar sotto la search */
  }
`;

const FilterGroup = styled.div``;

const FilterTitle = styled.h5`
  font-size: 1.1rem;
  margin-bottom: ${({ theme }) => theme.spacing(1)};
  color: ${({ theme }) => theme.colors.text};
`;

const Select = styled.select`
  width: 100%;
  padding: ${({ theme }) => theme.spacing(1)};
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 1px solid ${({ theme }) => theme.colors.surfaceDark};
  background-color: ${({ theme }) => theme.colors.surface};
  color: ${({ theme }) => theme.colors.text};
  &:focus {
    outline: 2px solid ${({ theme }) => theme.colors.primary};
    outline-offset: 2px;
  }
`;

const CheckboxContainer = styled.label`
  display: flex;
  align-items: center;
  gap: ${({ theme }) => theme.spacing(1)};
  cursor: pointer;
`;

const Checkbox = styled.input``;

/* Input numerico per price range */
const Input = styled.input`
  width: 100%;
  padding: ${({ theme }) => theme.spacing(1)};
  margin-bottom: ${({ theme }) => theme.spacing(1)};
  border: 1px solid ${({ theme }) => theme.colors.surfaceDark};
  border-radius: ${({ theme }) => theme.borderRadius};
`;

/* Pulsante Reset */
const ResetButton = styled.button`
  padding: ${({ theme }) => theme.spacing(1)};
  border: none;
  border-radius: ${({ theme }) => theme.borderRadius};
  background: ${({ theme }) => theme.colors.primary};
  color: #fff;
  cursor: pointer;
  &:hover {
    opacity: 0.9;
  }
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Component
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export default function FiltersSidebar({ filters, onFilterChange, onResetFilters }) {
  // fallback a [] se lo slice non ha ancora popolato categories/brands
  const { categories = [], brands = [] } = useSelector((s) => s.products);

  return (
    <SidebarContainer>
      <h3>Filters</h3>

      {/* Category */}
      <FilterGroup>
        <FilterTitle>Category</FilterTitle>
        <Select
          value={filters.category}
          onChange={(e) => onFilterChange('category', e.target.value)}
          aria-label="Filter by category"
        >
          <option value="">All Categories</option>
          {categories.map((cat) => (
            <option key={cat.id} value={cat.name}>
              {cat.name}
            </option>
          ))}
        </Select>
      </FilterGroup>

      {/* Brand */}
      <FilterGroup>
        <FilterTitle>Brand</FilterTitle>
        <Select
          value={filters.brand}
          onChange={(e) => onFilterChange('brand', e.target.value)}
          aria-label="Filter by brand"
        >
          <option value="">All Brands</option>
          {brands.map((brand) => (
            <option key={brand.id} value={brand.id}>
              {brand.name}
            </option>
          ))}
        </Select>
      </FilterGroup>

      {/* Price range */}
      <FilterGroup>
        <FilterTitle>Price Range</FilterTitle>
        <Input
          type="number"
          placeholder="Min Price"
          value={filters.minPrice ?? ''}
          onChange={(e) => onFilterChange('minPrice', e.target.value)}
          aria-label="Minimum price"
        />
        <Input
          type="number"
          placeholder="Max Price"
          value={filters.maxPrice ?? ''}
          onChange={(e) => onFilterChange('maxPrice', e.target.value)}
          aria-label="Maximum price"
        />
      </FilterGroup>

      {/* Availability */}
      <FilterGroup>
        <FilterTitle>Availability</FilterTitle>
        <CheckboxContainer>
          <Checkbox
            type="checkbox"
            checked={filters.inStockOnly}
            onChange={(e) => onFilterChange('inStockOnly', e.target.checked)}
            aria-label="Only show in stock products"
          />
          Only In Stock
        </CheckboxContainer>
      </FilterGroup>

      {/* Reset */}
      {onResetFilters && (
        <ResetButton type="button" onClick={onResetFilters}>
          Reset Filters
        </ResetButton>
      )}
    </SidebarContainer>
  );
}

/* Prop types */
FiltersSidebar.propTypes = {
  filters: PropTypes.object.isRequired,
  onFilterChange: PropTypes.func.isRequired,
  onResetFilters: PropTypes.func, // facoltativa, usata se presente
};
import React, { useState } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion'; // Per animazioni carousel [7]

/**
 * Componente ImageCarousel.
 * Mostra un carosello di immagini per un prodotto, con navigazione e thumbnail.
 */
const CarouselContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: ${({ theme }) => theme.spacing(2)};
  position: relative; // Per posizionamento frecce [58]
`;

const MainImageContainer = styled.div`
  width: 100%;
  max-width: 600px; // Larghezza massima per l'immagine principale
  height: 400px; // Altezza fissa per l'immagine principale
  overflow: hidden;
  border-radius: ${({ theme }) => theme.borderRadius};
  position: relative;
`;

const MainImage = styled(motion.img)`
  width: 100%;
  height: 100%;
  object-fit: contain; // Mantiene le proporzioni [58]
`;

const ThumbnailContainer = styled.div`
  display: flex;
  flex-wrap: wrap; // Permetti il wrap delle thumbnail
  justify-content: center;
  gap: ${({ theme }) => theme.spacing(1)};
`;

const Thumbnail = styled.img`
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 2px solid ${({ theme, active }) => 
    active ? theme.colors.primary : 'transparent'}; // Bordo per thumbnail attiva [58]
  cursor: pointer;
  transition: border-color 0.2s ease;

  &:hover {
    border-color: ${({ theme }) => theme.colors.primary};
  }
`;

const NavButton = styled(motion.button)`
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  padding: ${({ theme }) => theme.spacing(1)};
  border-radius: 50%;
  cursor: pointer;
  z-index: 10;
  font-size: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: center;

  &:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  &.left { left: ${({ theme }) => theme.spacing(2)}; }
  &.right { right: ${({ theme }) => theme.spacing(2)}; }
`;

const ImageCarousel = ({ images }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  if (!images || images.length === 0) return null;

  const handleNext = () => {
    setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  const handlePrev = () => {
    setCurrentImageIndex((prevIndex) => 
      (prevIndex - 1 + images.length) % images.length
    );
  };

  return (
    <CarouselContainer>
      <MainImageContainer>
        <AnimatePresence initial={false} mode="wait">
          <MainImage
            key={currentImageIndex} // Key per far reagire AnimatePresence al cambio di immagine
            src={images[currentImageIndex]}
            alt={`Product image ${currentImageIndex + 1}`}
            initial={{ opacity: 0 }} // Animazione di ingresso
            animate={{ opacity: 1 }} // Animazione quando presente
            exit={{ opacity: 0 }} // Animazione di uscita
            transition={{ duration: 0.3 }}
          />
        </AnimatePresence>
        {images.length > 1 && (
          <>
            <NavButton className="left" onClick={handlePrev} whileHover={{ scale: 1.1 }}>
              &larr;
            </NavButton>
            <NavButton className="right" onClick={handleNext} whileHover={{ scale: 1.1 }}>
              &rarr;
            </NavButton>
          </>
        )}
      </MainImageContainer>
      <ThumbnailContainer>
        {images.map((img, index) => (
          <Thumbnail
            key={index}
            src={img}
            alt={`Thumbnail ${index + 1}`}
            active={index === currentImageIndex}
            onClick={() => setCurrentImageIndex(index)}
          />
        ))}
      </ThumbnailContainer>
    </CarouselContainer>
  );
};

export default ImageCarousel;
import React from 'react';
import styled from 'styled-components';
import { useDispatch } from 'react-redux';
import { addToCart } from '../../store/slices/cartSlice';

/* ---------- styled components ---------- */
const Card = styled.div`
  background: ${({ theme }) => theme.colors.cardBg};
  border-radius: 8px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: box-shadow .2s;
  &:hover { box-shadow: 0 4px 12px rgba(0,0,0,.2); }
`;

const ImgWrapper = styled.div`
  position: relative;
  padding-top: 75%;
  img {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
`;

const Body  = styled.div`
  padding: 1rem;
  flex: 1;
  display: flex;
  flex-direction: column;
`;

const Title = styled.h3`
  font-size: 1rem;
  margin: .5rem 0;
  color: ${({ theme }) => theme.colors.text};
`;

const Price = styled.div`
  font-size: 1.1rem;
  font-weight: bold;
  margin-top: auto;
  color: ${({ theme }) => theme.colors.primary};
`;

const StockBadge = styled.span`
  background: ${({ qty }) =>
    qty === 0      ? '#dc3545' :   // rosso
    qty <= 5       ? '#ffc107' :   // giallo
                     '#28a745'};   // verde
  color: #fff;
  font-size: .75rem;
  padding: .25rem .5rem;
  border-radius: 4px;
  margin-bottom: .5rem;
  align-self: flex-start;
`;

const AddBtn = styled.button.attrs(({ disabled }) => ({ disabled }))`
  background: ${({ theme }) => theme.colors.primary};
  color: #fff;
  border: none;
  padding: .5rem;
  border-radius: 4px;
  cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};
  opacity: ${({ disabled }) => (disabled ? .6 : 1)};
  margin-top: .5rem;
  transition: opacity .2s;
`;

/* ---------- componente ---------- */
export default function ProductCard({ product }) {
  const dispatch = useDispatch();

  /* countInStock arriva giÃ  dalla normalizzazione; faccio fallback a inStock */
  const qty = product.countInStock ?? product.inStock ?? 0;

  const stockLabel =
    qty === 0 ? 'Out of Stock'
    : qty <= 5 ? `Only ${qty} left`
    : 'In Stock';

  const stars = Math.round(product.rating || 0);
  const imageSrc = product.images?.[0] || product.image;

  return (
    <Card>
      <ImgWrapper>
        <img src={imageSrc} alt={product.name} />
      </ImgWrapper>

      <Body>
        <StockBadge qty={qty}>{stockLabel}</StockBadge>

        <Title>{product.name}</Title>

        <div>
          {'â˜…'.repeat(stars)}{'â˜†'.repeat(5 - stars)}
          <small> ({product.numReviews})</small>
        </div>

        <Price>â‚¬{product.price.toFixed(2)}</Price>

        <AddBtn
          disabled={qty === 0}
          onClick={() => qty && dispatch(addToCart({ product, qty: 1 }))}
        >
          Add
        </AddBtn>
      </Body>
    </Card>
  );
}
import React, { useState } from 'react';
import styled from 'styled-components';

/**
 * Componente ProductSpecsTabs.
 * Mostra le specifiche tecniche e la compatibilitÃ  del prodotto in un'interfaccia a tab.
 */
const TabsContainer = styled.div`
  margin-top: ${({ theme }) => theme.spacing(4)};
`;

const TabButtons = styled.div`
  display: flex;
  border-bottom: 1px solid ${({ theme }) => theme.colors.surfaceDark}; /* Bordo inferiore per le tab [9] */
`;

const TabButton = styled.button`
  background: none;
  border: none;
  padding: ${({ theme }) => theme.spacing(2)};
  cursor: pointer;
  font-size: 1.1rem;
  color: ${({ theme, active }) => 
    active ? theme.colors.primary : theme.colors.textLight}; /* Colore attivo [9] */
  border-bottom: 2px solid ${({ theme, active }) => 
    active ? theme.colors.primary : 'transparent'}; /* Sottolineatura attiva [9] */
  transition: all 0.3s ease;

  &:hover {
    color: ${({ theme }) => theme.colors.primary};
  }

  &:focus {
    outline: 2px solid ${({ theme }) => theme.colors.primary}; // AccessibilitÃ  focus [2, 7]
    outline-offset: 2px;
  }
`;

const TabContent = styled.div`
  padding: ${({ theme }) => theme.spacing(3)};
  background: ${({ theme }) => theme.colors.surfaceLight}; /* Sfondo del contenuto [9] */
  border-radius: 0 0 ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius};
`;

const ProductSpecsTabs = ({ description, specifications, compatibility }) => {
  const [activeTab, setActiveTab] = useState('description'); // Tab attivo di default

  return (
    <TabsContainer>
      <TabButtons>
        <TabButton 
          active={activeTab === 'description'} 
          onClick={() => setActiveTab('description')}
        >
          Description
        </TabButton>
        <TabButton 
          active={activeTab === 'specifications'} 
          onClick={() => setActiveTab('specifications')}
        >
          Specifications
        </TabButton>
        <TabButton 
          active={activeTab === 'compatibility'} 
          onClick={() => setActiveTab('compatibility')}
        >
          Compatibility
        </TabButton>
      </TabButtons>
      <TabContent>
        {activeTab === 'description' && (
          <p>{description || 'No description available.'}</p>
        )}
        {activeTab === 'specifications' && (
          <ul>
            {specifications && specifications.length > 0 ? (
              specifications.map((spec, index) => (
                <li key={index}>{spec}</li>
              ))
            ) : (
              <li>No specifications available.</li>
            )}
          </ul>
        )}
        {activeTab === 'compatibility' && (
          <ul>
            {compatibility && compatibility.length > 0 ? (
              compatibility.map((comp, index) => (
                <li key={index}>{comp}</li>
              ))
            ) : (
              <li>No compatibility information available.</li>
            )}
          </ul>
        )}
      </TabContent>
    </TabsContainer>
  );
};

export default ProductSpecsTabs;
import React, { useEffect, useState } from 'react';
import styled from 'styled-components';
import { useSelector, useDispatch } from 'react-redux';
import { fetchProducts } from '../../store/slices/productsSlice'; // Per fetchare tutti i prodotti
import ProductCard from './ProductCard'; // Per mostrare i prodotti correlati
import Skeleton from '../ui/Skeleton';

/**
 * Componente RelatedProducts.
 * Suggerisce prodotti correlati allo stesso prodotto visualizzato (es. stessa categoria o brand). [58]
 */
const SectionContainer = styled.div`
  margin-top: ${({ theme }) => theme.spacing(4)};
  padding: ${({ theme }) => theme.spacing(3)};
  background: ${({ theme }) => theme.colors.surfaceLight};
  border-radius: ${({ theme }) => theme.borderRadius};
`;

const SectionTitle = styled.h4`
  font-size: 1.5rem;
  margin-bottom: ${({ theme }) => theme.spacing(3)};
  color: ${({ theme }) => theme.colors.text};
  text-align: center;
`;

const ProductsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: ${({ theme }) => theme.spacing(3)};
`;

const RelatedProducts = ({ currentProductId, currentProductCategory }) => {
  const dispatch = useDispatch();
  const { items: allProducts, status } = useSelector(state => state.products); // Prendi tutti i prodotti dallo store Redux
  const [relatedProducts, setRelatedProducts] = useState([]);

  useEffect(() => {
    // Se i prodotti non sono ancora stati caricati, dispatcha l'azione
    if (status === 'idle') {
      dispatch(fetchProducts());
    }
  }, [status, dispatch]);

  useEffect(() => {
    if (allProducts.length > 0 && currentProductCategory) {
      // Filtra i prodotti per categoria e escludi il prodotto corrente [58]
      const filtered = allProducts.filter(
        p => p.category === currentProductCategory && p.id !== currentProductId
      );
      // Mescola i prodotti e prendi i primi 4 per esempio
      setRelatedProducts(
        filtered.sort(() => 0.5 - Math.random()).slice(0, 4)
      );
    }
  }, [allProducts, currentProductId, currentProductCategory]);

  if (status === 'loading') {
    return (
      <SectionContainer>
        <SectionTitle>Related Products</SectionTitle>
        <ProductsGrid>
          {[...Array(4)].map((_, i) => <Skeleton key={i} width="200px" height="280px" />)}
        </ProductsGrid>
      </SectionContainer>
    );
  }

  if (!relatedProducts || relatedProducts.length === 0) {
    return null; // Non mostrare la sezione se non ci sono prodotti correlati
  }

  return (
    <SectionContainer>
      <SectionTitle>You might also like</SectionTitle>
      <ProductsGrid>
        {relatedProducts.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </ProductsGrid>
    </SectionContainer>
  );
};

export default RelatedProducts;
import React, { useState } from 'react';
import styled, { useTheme } from 'styled-components';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import Button from '../ui/Button';
import Input from '../ui/Input';
import { toast } from 'react-toastify';
import api from '../../api/api';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€ Schema di validazione â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
const reviewSchema = yup.object().shape({
  name: yup.string().required('Name is required'),
  rating: yup
    .number()
    .typeError('Rating is required')
    .min(1, 'Rating must be at least 1 star')
    .max(5, 'Rating cannot exceed 5 stars')
    .required('Rating is required'),
  comment: yup.string().required('Comment is required'),
});

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€ Styled components â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: 2rem;
  background: ${({ theme }) => theme.colors.cardBg};
  padding: 1.5rem;
  border-radius: ${({ theme }) => theme.borderRadius || '4px'};
`;

const TextArea = styled.textarea`
  width: 100%;
  padding: 0.75rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: ${({ theme }) => theme.borderRadius || '4px'};
  background-color: ${({ theme }) => theme.colors.cardBg};
  color: ${({ theme }) => theme.colors.text};
  font-size: 1rem;
  min-height: 100px;
  resize: vertical;

  &:focus {
    outline: 2px solid ${({ theme }) => theme.colors.primary};
    outline-offset: 2px;
  }
`;

const ErrorMessage = styled.p`
  color: ${({ theme }) => theme.colors.danger || '#ff4d4f'};
  font-size: 0.875rem;
  margin-top: 0.5rem;
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€ Component â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
export default function ReviewForm({ productId, onReviewSubmit }) {
  const theme = useTheme();
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm({ resolver: yupResolver(reviewSchema) });

  const [loading, setLoading] = useState(false);

  const onSubmit = async (data) => {
    setLoading(true);
    try {
      const { data: newReview } = await api.post('/reviews', {
        productId,
        ...data,
        date: new Date().toISOString(),
      });

      toast.success('Review submitted successfully!');
      if (onReviewSubmit) onReviewSubmit(newReview);
      reset();
    } catch (error) {
      const message =
        error?.response?.data?.message ||
        error.message ||
        'Failed to submit review.';
      toast.error(message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Form onSubmit={handleSubmit(onSubmit)} noValidate>
      <h5 style={{ color: theme.colors.text, marginBottom: '0.5rem' }}>
        Leave a Review
      </h5>

      <Input
        label="Your Name"
        type="text"
        {...register('name')}
        error={errors.name?.message}
      />

      <Input
        label="Rating (1â€“5)"
        type="number"
        min="1"
        max="5"
        {...register('rating')}
        error={errors.rating?.message}
      />

      <label htmlFor="comment" style={{ color: theme.colors.text }}>
        Your Comment
      </label>
      <TextArea
        id="comment"
        placeholder="Write your review here..."
        {...register('comment')}
        aria-invalid={!!errors.comment}
        aria-describedby={errors.comment ? 'comment-error' : undefined}
      />
      {errors.comment && (
        <ErrorMessage id="comment-error" role="alert">
          {errors.comment.message}
        </ErrorMessage>
      )}

      <Button type="submit" disabled={loading}>
        {loading ? 'Submittingâ€¦' : 'Submit Review'}
      </Button>
    </Form>
  );
}
import React from 'react';
import styled from 'styled-components';
import SingleReview from './SingleReview';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faStar as solidStar } from '@fortawesome/free-solid-svg-icons';
import { faStar as regularStar } from '@fortawesome/free-regular-svg-icons';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€ Styled components â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
const SectionContainer = styled.div`
  margin-top: ${({ theme }) => theme.spacing(4)};
  background: ${({ theme }) => theme.colors.surfaceLight};
  padding: ${({ theme }) => theme.spacing(3)};
  border-radius: ${({ theme }) => theme.borderRadius};
`;

const SectionTitle = styled.h4`
  font-size: 1.5rem;
  margin-bottom: ${({ theme }) => theme.spacing(2)};
  color: ${({ theme }) => theme.colors.text};
`;

const ReviewList = styled.ul`
  list-style: none;
  padding: 0;
`;

const ReviewItem = styled.li`
  border-bottom: 1px solid ${({ theme }) => theme.colors.surfaceDark};
  padding-bottom: ${({ theme }) => theme.spacing(2)};
  margin-bottom: ${({ theme }) => theme.spacing(2)};
  &:last-child {
    border-bottom: none;
  }
`;

const ReviewHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: ${({ theme }) => theme.spacing(1)};
`;

const ReviewAuthor = styled.span`
  font-weight: bold;
  color: ${({ theme }) => theme.colors.text};
`;

const RatingStars = styled.div`
  color: ${({ theme }) => theme.colors.primary};
`;

const ReviewComment = styled.p`
  color: ${({ theme }) => theme.colors.textLight};
  font-size: 0.95rem;
`;

const NoReviewsMessage = styled.p`
  font-style: italic;
  color: ${({ theme }) => theme.colors.textLight};
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€ Component â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
export default function ReviewSection({ reviews = [] }) {
  return (
    <SectionContainer>
      <SectionTitle>Customer Reviews</SectionTitle>

      {reviews.length > 0 ? (
        <ReviewList>
          {reviews.map((review) => (
            <ReviewItem key={review.id}>
              <ReviewHeader>
                <ReviewAuthor>{review.name}</ReviewAuthor>
                <RatingStars>
                  {[...Array(5)].map((_, i) => (
                    <FontAwesomeIcon
                      key={i}
                      icon={i < review.rating ? solidStar : regularStar}
                    />
                  ))}
                </RatingStars>
              </ReviewHeader>
              <ReviewComment>{review.comment}</ReviewComment>
            </ReviewItem>
          ))}
        </ReviewList>
      ) : (
        <NoReviewsMessage>
          No reviews yet. Be the first to share your opinion!
        </NoReviewsMessage>
      )}
    </SectionContainer>
  );
}

/* Work-around per React Fast Refresh (elimina il warning) */
export {};
import React from 'react';
import styled from 'styled-components';
import Input from '../ui/Input';
import { useDebounce } from '../../hooks/useDebounce'; // Custom hook per il debounce

/**
 * Componente SearchBar.
 * Implementa una barra di ricerca con debounce per ottimizzare le performance.
 */
const SearchContainer = styled.div`
  flex: 1;
  min-width: 250px;
  position: relative; // Per i suggerimenti futuri [58]
`;

const StyledInput = styled(Input)`
  width: 100%;
`;

const SearchBar = ({ onSearch }) => {
  const debouncedSearch = useDebounce(onSearch, 500); // Debounce di 500ms [58]

  const handleChange = (e) => {
    debouncedSearch(e.target.value); // Invia il valore con debounce
  };

  return (
    <SearchContainer>
      <StyledInput
        type="text"
        placeholder="Search products..."
        onChange={handleChange}
        aria-label="Search products"
      />
      {/* Suggerimenti di ricerca verranno qui [58] */}
    </SearchContainer>
  );
};

export default SearchBar;
import React from 'react';
import styled from 'styled-components';

const ReviewCard = styled.article`
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: ${({ theme }) => theme.borderRadius};
  padding: ${({ theme }) => theme.spacing(2)};
  margin-bottom: ${({ theme }) => theme.spacing(2)};
  background: ${({ theme }) => theme.colors.cardBg};
`;

export default function SingleReview({ review }) {
  return (
    <ReviewCard>
      <strong>{review.name}</strong>&nbsp;
      <span>({review.rating}â˜…)</span>
      <p style={{ marginTop: '0.5rem' }}>{review.comment}</p>
      <small>{new Date(review.date).toLocaleDateString()}</small>
    </ReviewCard>
  );
}
import React from 'react';
import styled from 'styled-components';

/**
 * Componente SortDropdown.
 * Permette di ordinare la lista dei prodotti (prezzo, popolaritÃ , novitÃ ).
 */
const DropdownContainer = styled.div`
  margin-left: auto; // Allinea a destra
`;

const Select = styled.select`
  padding: ${({ theme }) => theme.spacing(1)};
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 1px solid ${({ theme }) => theme.colors.surfaceDark};
  background-color: ${({ theme }) => theme.colors.surface};
  color: ${({ theme }) => theme.colors.text};
  &:focus {
    outline: 2px solid ${({ theme }) => theme.colors.primary};
    outline-offset: 2px;
  }
`;

const SortDropdown = ({ sortBy, onSortChange }) => {
  return (
    <DropdownContainer>
      <label htmlFor="sort-by-select" style={{ marginRight: '8px' }}>Sort By:</label>
      <Select
        id="sort-by-select"
        value={sortBy}
        onChange={(e) => onSortChange(e.target.value)}
        aria-label="Sort products by"
      >
        <option value="popularity">Popularity</option>
        <option value="price-asc">Price: Low to High</option>
        <option value="price-desc">Price: High to Low</option>
        <option value="name-asc">Name: A-Z</option>
        <option value="name-desc">Name: Z-A</option>
        {/* Aggiungi altri criteri di ordinamento come "novitÃ " se i dati lo supportano [70] */}
      </Select>
    </DropdownContainer>
  );
};

export default SortDropdown;
import React from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion'; // Per animazioni leggere [7]

/**
 * Componente Button riutilizzabile.
 * Supporta stati di hover e disabled, e animazioni leggere.
 */
const StyledButton = styled(motion.button)`
  padding: ${({ theme }) => theme.spacing(1.5)} ${({ theme }) => theme.spacing(3)}; /* Spaziatura padding [8] */
  border: none;
  border-radius: ${({ theme }) => theme.borderRadius}; /* Raggio dei bordi [9] */
  background: ${({ theme }) => theme.colors.primary}; /* Colore primario (arancione) [9] */
  color: ${({ theme }) => theme.colors.onPrimary}; /* Colore del testo sul primario [9] */
  font-size: 1rem;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease; /* Transizione fluida [7] */

  &:hover {
    background-color: ${({ theme }) => theme.colors.primaryDark || '#E65100'}; /* Scurendo il primario al hover */
  }

  &:disabled {
    background-color: ${({ theme }) => theme.colors.textLight}; /* Grigio chiaro quando disabilitato [9] */
    cursor: not-allowed;
    opacity: 0.7;
  }

  // Focus visibile per accessibilitÃ  [2, 7]
  &:focus {
    outline: 2px solid ${({ theme }) => theme.colors.primary};
    outline-offset: 2px;
  }
`;

const Button = ({ children, ...props }) => {
  return (
    <StyledButton
      whileHover={{ scale: 1.05 }} // Animazione leggera al passaggio del mouse [7]
      whileTap={{ scale: 0.95 }} // Animazione leggera al click
      {...props}
    >
      {children}
    </StyledButton>
  );
};

export default Button;
// src/components/ui/Input.jsx
import React, { forwardRef } from 'react';
import styled from 'styled-components';

/* ------------------------------------------------------------------ */
/*  Styled                                                            */
/* ------------------------------------------------------------------ */
const InputWrapper = styled.div`
  margin-bottom: ${({ theme }) => theme.spacing(2)};
  width: 100%;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 0.25rem;
  font-weight: 600;
`;

const ControlWrapper = styled.div`
  position: relative;
`;

const IconSlot = styled.span`
  position: absolute;
  left: 0.85rem;
  top: 50%;
  transform: translateY(-50%);
  display: flex;
  align-items: center;
  color: ${({ theme }) => theme.colors.textLight};
  pointer-events: none;   /* non intercetta il click */
  font-size: 0.9rem;
`;

const StyledInput = styled.input`
  width: 100%;
  padding: ${({ theme }) => theme.spacing(1.5)};
  padding-left: ${({ $hasIcon, theme }) =>
    $hasIcon ? `calc(${theme.spacing(1.5)} * 2.3)` : theme.spacing(1.5)};
  border: 1px solid
    ${({ theme, $hasError }) =>
      $hasError ? theme.colors.danger : theme.colors.surfaceDark};
  border-radius: ${({ theme }) => theme.borderRadius};
  background-color: ${({ theme }) => theme.colors.surfaceLight};
  color: ${({ theme }) => theme.colors.text};
  font-size: 1rem;
  transition: border-color 0.2s ease-in-out;

  &:focus {
    outline: 2px solid ${({ theme }) => theme.colors.primary};
    outline-offset: 2px;
    border-color: ${({ theme }) => theme.colors.primary};
  }
`;

const ErrorMessage = styled.p`
  color: ${({ theme }) => theme.colors.danger};
  font-size: 0.875rem;
  margin-top: ${({ theme }) => theme.spacing(0.5)};
`;

/* ------------------------------------------------------------------ */
/*  Component                                                         */
/* ------------------------------------------------------------------ */
const Input = forwardRef(
  (
    {
      label,
      icon,        // <FaUser />, <FaEnvelope />, ...
      type = 'text',
      name,
      error,
      as = 'input',  // supporta textarea
      ...props
    },
    ref
  ) => (
    <InputWrapper>
      {label && <Label htmlFor={name}>{label}</Label>}

      <ControlWrapper>
        {icon && <IconSlot>{icon}</IconSlot>}

        <StyledInput
          as={as}
          type={type}
          name={name}
          id={name}
          ref={ref}
          $hasError={Boolean(error)}
          $hasIcon={Boolean(icon)}
          {...props}
        />
      </ControlWrapper>

      {error && (
        <ErrorMessage role="alert">{error}</ErrorMessage>
      )}
    </InputWrapper>
  )
);

export default Input;
import React from 'react';
import styled, { keyframes } from 'styled-components';

/**
 * Componente Skeleton per indicare il caricamento di contenuti.
 * Simula la forma e la dimensione del contenuto che verrÃ  caricato.
 */
const pulse = keyframes`
  0% {
    background-color: ${({ theme }) => theme.colors.surfaceDark}; /* Colore scuro iniziale [9] */
  }
  50% {
    background-color: ${({ theme }) => theme.colors.surfaceLight}; /* Colore piÃ¹ chiaro a metÃ  animazione [9] */
  }
  100% {
    background-color: ${({ theme }) => theme.colors.surfaceDark};
  }
`;

const StyledSkeleton = styled.div`
  width: ${({ width }) => width || '100%'}; /* Larghezza dinamica o di default */
  height: ${({ height }) => height || '1em'}; /* Altezza dinamica o di default */
  border-radius: ${({ theme }) => theme.borderRadius};
  animation: ${pulse} 1.5s infinite ease-in-out; /* Animazione di pulsazione */
  margin-bottom: ${({ theme }) => theme.spacing(1)};
`;

const Skeleton = ({ width, height }) => {
  return <StyledSkeleton width={width} height={height} aria-hidden="true" />; // aria-hidden per non essere letto dagli screen reader
};

export default Skeleton;
import React from 'react';
import styled, { keyframes } from 'styled-components';

/**
 * Componente Spinner per indicare stati di caricamento.
 * Implementa un'animazione di rotazione semplice.
 */
const rotate = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;

const StyledSpinner = styled.div`
  border: 4px solid ${({ theme }) => theme.colors.surfaceLight}; /* Grigio chiaro per il bordo esterno [9] */
  border-top: 4px solid ${({ theme }) => theme.colors.primary}; /* Colore primario per la parte animata [9] */
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: ${rotate} 0.8s linear infinite; /* Animazione di rotazione continua */
  margin: 20px auto; /* Centra lo spinner */
`;

const Spinner = () => {
  return <StyledSpinner aria-label="Loading content" />; // Aggiunto aria-label per accessibilitÃ 
};

export default Spinner;
// src/contexts/ThemeContext.jsx
import { createContext } from 'react';

export const ThemeContext = createContext({
  mode: 'light',
  toggleTheme: () => {}
});
// src/contexts/ThemeProvider.jsx
import React, { useState, useEffect } from 'react';
import { ThemeContext } from './ThemeContext';

export function ThemeProviderWrapper({ children }) {
  const [mode, setMode] = useState(() => {
    if (localStorage.theme === 'dark') return 'dark';
    if (localStorage.theme === 'light') return 'light';
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light';
  });

  useEffect(() => {
    document.documentElement.classList.toggle('dark', mode === 'dark');
    localStorage.theme = mode;
  }, [mode]);

  const toggleTheme = () =>
    setMode(prev => (prev === 'dark' ? 'light' : 'dark'));

  return (
    <ThemeContext.Provider value={{ mode, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}
import { useSelector, useDispatch } from 'react-redux';
import { loginUser, logout } from '../store/slices/authSlice'; // Importa le azioni definite nello slice

// Custom hook per la gestione dell'autenticazione
export function useAuth() {
  const dispatch = useDispatch(); // Hook per dispatchare azioni Redux
  // Seleziona le parti dello stato 'auth' che interessano
  const { user, token, isAuthenticated, status, error } = useSelector(s => s.auth);

  // Funzione per effettuare il login, dispatcha l'azione loginUser
  const signIn = (credentials) => dispatch(loginUser(credentials));
  // Funzione per effettuare il logout, dispatcha l'azione logout
  const signOut = () => dispatch(logout());

  // Restituisce lo stato e le funzioni per essere utilizzate nei componenti
  return { user, token, isAuthenticated, status, error, signIn, signOut };
}
import { useState, useEffect } from 'react';

// Custom hook per gestire lo stato persistente nel localStorage
function useLocalStorage(key, initialValue) {
  // Funzione per inizializzare lo stato leggendo dal localStorage
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      // Parsa il JSON se esiste, altrimenti usa il valore iniziale
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      // Se c'Ã¨ un errore (es. JSON non valido), logga l'errore e restituisci il valore iniziale
      console.warn(`Error reading localStorage key â€œ${key}â€:`, error);
      return initialValue;
    }
  });

  // useEffect per aggiornare il localStorage ogni volta che storedValue cambia
  useEffect(() => {
    try {
      window.localStorage.setItem(key, JSON.stringify(storedValue));
    } catch (error) {
      // Logga errori durante la scrittura nel localStorage
      console.warn(`Error writing localStorage key â€œ${key}â€:`, error);
    }
  }, [key, storedValue]); // Dipendenze: la chiave e il valore dello stato

  // Restituisce il valore dello stato e la funzione per aggiornarlo
  return [storedValue, setStoredValue];
}

export default useLocalStorage;
/* src/index.css */

/* 
 * Questo file Ã¨ il punto di ingresso per gli stili CSS globali.
 * Se stai usando Styled Components per la maggior parte degli stili globali
 * (tramite GlobalStyle.js), questo file si concentra su:
 * 1. Importazione delle direttive di Tailwind CSS (se in uso).
 * 2. Importazione degli stili di librerie esterne che non sono Styled Components.
 */

/* -------------------------------------------------------------------------
 * 1. Direttive di Tailwind CSS (se configurato nel progetto)
 *    Queste importano gli stili base, i componenti e le utility di Tailwind.
 *    Assicurati che Tailwind CSS sia installato e configurato (tailwind.config.js).
 * ------------------------------------------------------------------------- */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* -------------------------------------------------------------------------
 * 2. Stili di librerie esterne
 *    Qui importiamo il CSS di librerie come react-toastify per le notifiche.
 *    La libreria React Toastify Ã¨ utilizzata per i messaggi di feedback [14, 15].
 * ------------------------------------------------------------------------- */
@import 'react-toastify/dist/ReactToastify.css';

/* -------------------------------------------------------------------------
 * 3. Eventuali stili CSS globali di base (alternativi o aggiuntivi a GlobalStyle)
 *    Se non usi GlobalStyle.js per il reset o per definizioni base del body,
 *    potresti includerli qui. Nel tuo progetto, GlobalStyle.js gestisce giÃ :
 *    - Reset CSS [7]
 *    - Font globali (es. 'Inter' come visto in GlobalStyle.js [7])
 *    - Colori di sfondo e testo iniziali (gestiti dal tema dinamico) [7]
 *    - Outline per accessibilitÃ  su elementi in focus [3, 5, 7, 17, 18]
 *    Quindi, questa sezione puÃ² rimanere minima o vuota.
 * ------------------------------------------------------------------------- */
body {
  /* Esempio: assicurati che il flexbox per il layout generale sia attivo */
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

#root {
  flex: 1; /* Assicura che #root si espanda per occupare lo spazio disponibile */
}

/* Nota: altri stili globali o variabili sono definiti in src/styles/GlobalStyle.js
   e src/styles/theme.js e applicati tramite ThemeProvider e GlobalStyle in App.jsx. */
// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { Provider }        from 'react-redux';
import { ThemeProvider }   from 'styled-components';
import { ToastContainer }  from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import GlobalStyle from './styles/GlobalStyle';
import theme       from './styles/theme';
import store       from './store/store';
import App         from './App';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <ThemeProvider theme={theme}>
        <GlobalStyle />

        <BrowserRouter>
          <App />
        </BrowserRouter>

        <ToastContainer
          position="bottom-right"
          theme="dark"
          autoClose={3000}
        />
      </ThemeProvider>
    </Provider>
  </React.StrictMode>
);
// src/pages/AboutPage.jsx
import React from 'react';
import styled, { keyframes } from 'styled-components';

/* ------------------------------------------------------------------ */
/*  Animation                                                         */
/* ------------------------------------------------------------------ */
const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(12px); }
  to   { opacity: 1; transform: translateY(0); }
`;

/* ------------------------------------------------------------------ */
/*  Containers & typography                                           */
/* ------------------------------------------------------------------ */
const AboutContainer = styled.article`
  max-width: 960px;
  margin: 4rem auto;
  padding: ${({ theme }) => theme.spacing(5)};
  background: ${({ theme }) => theme.colors.lightBg};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
  animation: ${fadeIn} 0.6s ease-out both;
  line-height: 1.75;
  color: ${({ theme }) => theme.colors.text};
`;

const SectionTitle = styled.h2`
  text-align: center;
  font-size: 2.25rem;
  margin: ${({ theme }) => theme.spacing(5)} 0 ${({ theme }) => theme.spacing(3)};
  color: ${({ theme }) => theme.colors.primary};
`;

const IntroText = styled.p`
  font-size: 1.15rem;
  text-align: center;
  margin-bottom: ${({ theme }) => theme.spacing(4)};
`;

/* ------------------------------------------------------------------ */
/*  Emphasised words & highlighted paragraphs                         */
/* ------------------------------------------------------------------ */
const Emphasis = styled.span`
  color: ${({ theme }) => theme.colors.primaryDark || theme.colors.primary};
  font-weight: 700;
`;

const Paragraph = styled.p`
  margin-bottom: ${({ theme }) => theme.spacing(3)};
  padding: ${({ theme }) => theme.spacing(2)} ${({ theme }) => theme.spacing(3)};
  background: ${({ theme }) => theme.colors.paper};
  border-left: 4px solid ${({ theme }) => theme.colors.primary};
  border-radius: 4px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.04);
`;

/* ------------------------------------------------------------------ */
/*  Brand grid                                                        */
/* ------------------------------------------------------------------ */
const BrandGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  gap: ${({ theme }) => theme.spacing(4)};
  justify-items: center;
  align-items: center;
  margin-top: ${({ theme }) => theme.spacing(4)};
`;

const BrandLogoWrapper = styled.div`
  width: 100px;
  aspect-ratio: 1 / 1;
  display: grid;
  place-items: center;
  background: ${({ theme }) => theme.colors.paper};
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
  overflow: hidden;
  transition: transform 0.25s ease, box-shadow 0.25s ease;
  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 14px rgba(0, 0, 0, 0.12);
  }
`;

const BrandLogo = styled.img`
  max-width: 80%;
  height: auto;
  filter: grayscale(100%);
  transition: filter 0.3s ease-in-out;
  ${BrandLogoWrapper}:hover & {
    filter: grayscale(0%);
  }
`;

/* ------------------------------------------------------------------ */
/*  Closing stats                                                     */
/* ------------------------------------------------------------------ */
const StatsTable = styled.div`
  margin-top: ${({ theme }) => theme.spacing(6)};
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: ${({ theme }) => theme.spacing(4)};
`;

const StatBox = styled.div`
  text-align: center;
  padding: ${({ theme }) => theme.spacing(3)};
  background: ${({ theme }) => theme.colors.paper};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 2px 6px rgba(0,0,0,0.06);
`;

const StatNumber = styled.div`
  font-size: 2rem;
  font-weight: 700;
  color: ${({ theme }) => theme.colors.primary};
`;

const StatLabel = styled.div`
  margin-top: 0.25rem;
  font-size: 0.9rem;
`;

/* ------------------------------------------------------------------ */
/*  Mock brand list                                                   */
/* ------------------------------------------------------------------ */
const brands = [
  { id: 1,  name: 'Polini',    logo: '/images/brands/polini.png'    },
  { id: 2,  name: 'Malossi',   logo: '/images/brands/malossi.png'   },
  { id: 3,  name: 'Piaggio',   logo: '/images/brands/piaggio.png'   },
  { id: 4,  name: 'Yamaha',    logo: '/images/brands/yamaha.png'    },
  { id: 5,  name: 'Aprilia',   logo: '/images/brands/aprilia.png'   },
  { id: 6,  name: 'Bosch',     logo: '/images/brands/bosch.png'     },
  { id: 7,  name: 'Akrapovic', logo: '/images/brands/akrapovic.png' },
  { id: 8,  name: 'Michelin',  logo: '/images/brands/michelin.png'  },
  { id: 9,  name: 'Brembo',    logo: '/images/brands/brembo.png'    },
  { id: 10, name: 'Dellorto',  logo: '/images/brands/dellorto.png'  },
  { id: 11, name: 'Arrow',     logo: '/images/brands/arrow.png'     },
  { id: 12, name: 'NGK',       logo: '/images/brands/ngk.png'       },
];

/* ------------------------------------------------------------------ */
/*  Component                                                         */
/* ------------------------------------------------------------------ */
export default function AboutPage() {
  return (
    <AboutContainer>
      {/* ---------- Intro ---------- */}
      <SectionTitle>About&nbsp;Us</SectionTitle>
      <IntroText>
        <strong>Ridfix</strong> is the premier online destination for
        high-performance spare parts and accessories dedicated to scooters
        and mopeds.
      </IntroText>

      {/* ---------- Story ---------- */}
      <Paragraph>
        Founded in <Emphasis>2017</Emphasis> by a small team of passionate
        riders and engineers, Ridfix has grown from a local workshop in
        Emilia-Romagna into an <Emphasis>international e-commerce leader</Emphasis>.
        Our vision remains unchanged: making premium components accessible to
        every two-wheel enthusiast, wherever the roadâ€”or off-roadâ€”may lead.
      </Paragraph>

      {/* ---------- Mission ---------- */}
      <SectionTitle>Our&nbsp;Mission</SectionTitle>
      <Paragraph>
        We meticulously curate our catalogue, partnering only with
        manufacturers that share our obsession for
        <Emphasis> reliability</Emphasis>,
        <Emphasis> safety</Emphasis> and
        <Emphasis> innovation</Emphasis>. Each product undergoes
        rigorous <Emphasis>quality assurance</Emphasis> so you can ride with
        total confidence.
      </Paragraph>
      <Paragraph>
        Beyond parts, we deliver a <Emphasis>seamless customer experience</Emphasis>:
        lightning-fast dispatch, transparent pricing and expert guidance from
        real humansâ€”seven days a week.
      </Paragraph>

      {/* ---------- Values ---------- */}
      <SectionTitle>What&nbsp;Drives&nbsp;Us</SectionTitle>
      <Paragraph>
        <Emphasis>Integrity.</Emphasis> Honest advice and authentic productsâ€”no
        compromises.
      </Paragraph>
      <Paragraph>
        <Emphasis>Performance.</Emphasis> Excellence on the street and the track.
      </Paragraph>
      <Paragraph>
        <Emphasis>Community.</Emphasis> We ride together. Your feedback shapes
        our future.
      </Paragraph>

      {/* ---------- Contact ---------- */}
      <Paragraph>
        Questions or custom requests?&nbsp;
        <a href="/contact">Reach out here</a> or write to&nbsp;
        <a href="mailto:assistance@ridfix.it">assistance@ridfix.it</a>. 
        Our specialists respond within <Emphasis>24&nbsp;hours</Emphasis>â€”every day.
      </Paragraph>

      {/* ---------- Brands ---------- */}
      <SectionTitle>Our&nbsp;Trusted&nbsp;Brands</SectionTitle>
      <IntroText>
        We proudly collaborate with Europeâ€™s most respected names
        in engineering, racing and design.
      </IntroText>
      <BrandGrid>
        {brands.map(({ id, name, logo }) => (
          <BrandLogoWrapper key={id} title={name}>
            <BrandLogo src={logo} alt={`${name} logo`} loading="lazy" />
          </BrandLogoWrapper>
        ))}
      </BrandGrid>

      {/* ---------- Stats ---------- */}
      <StatsTable>
        <StatBox>
          <StatNumber>15 000+</StatNumber>
          <StatLabel>Products in stock</StatLabel>
        </StatBox>
        <StatBox>
          <StatNumber>12</StatNumber>
          <StatLabel>Premium brands</StatLabel>
        </StatBox>
        <StatBox>
          <StatNumber>24/7</StatNumber>
          <StatLabel>Real-time support</StatLabel>
        </StatBox>
        <StatBox>
          <StatNumber>99%</StatNumber>
          <StatLabel>Customer satisfaction</StatLabel>
        </StatBox>
      </StatsTable>
    </AboutContainer>
  );
}
import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { Routes, Route, Link, Navigate } from 'react-router-dom';
import styled from 'styled-components';
import api from '../api/api';
import Spinner from '../components/ui/Spinner';
import NotFoundPage from './NotFoundPage'; // âœ… unico componente 404

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Styled components
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const Container = styled.div`
  padding: 2rem;
`;
const Nav = styled.nav`
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
`;
const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  th,
  td {
    padding: 0.5rem;
    border: 1px solid ${({ theme }) => theme.colors.border};
  }
`;
const Button = styled.button`
  padding: 0.25rem 0.5rem;
  margin-right: 0.5rem;
  background: ${({ theme }) => theme.colors.primary};
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:hover {
    opacity: 0.9;
  }
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Products CRUD list
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
function ProductsList() {
  const [products, setProducts] = useState(null);

  useEffect(() => {
    api.get('/products').then((res) => setProducts(res.data));
  }, []);

  if (!products) return <Spinner />;

  return (
    <>
      <h3>Manage Products</h3>
      <Link to="create">
        <Button>Create New Product</Button>
      </Link>
      <Table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Price</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {products.map((p) => (
            <tr key={p.id}>
              <td>{p.id}</td>
              <td>{p.name}</td>
              <td>â‚¬{p.price.toFixed(2)}</td>
              <td>
                <Link to={`edit/${p.id}`}>
                  <Button>Edit</Button>
                </Link>
                <Link to={`delete/${p.id}`}>
                  <Button>Delete</Button>
                </Link>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </>
  );
}

/* Placeholder per Create/Edit/Delete */
function DummyPage({ action }) {
  return <p>{action} product page (to be implemented)</p>;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  AdminPage â€“ protetta e senza flicker
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export default function AdminPage() {
  const { user } = useSelector((state) => state.auth);

  /* 1. Protezione immediata â†’ redirect se non admin */
  if (!user || user.role !== 'admin') {
    return <Navigate to="/" replace />;
  }

  /* 2. Dashboard UI + sottorouting */
  return (
    <Container>
      <h1>Admin Dashboard</h1>

      <Nav>
        <Link to="products">
          <Button>Products</Button>
        </Link>
        <Link to="users">
          <Button>Users</Button>
        </Link>
        <Link to="orders">
          <Button>Orders</Button>
        </Link>
      </Nav>

      <Routes>
        {/* Products CRUD */}
        <Route path="products/create" element={<DummyPage action="Create" />} />
        <Route path="products/edit/:id" element={<DummyPage action="Edit" />} />
        <Route
          path="products/delete/:id"
          element={<DummyPage action="Delete" />}
        />
        <Route path="products/*" element={<ProductsList />} />

        {/* TODO: routes per users e orders */}

        {/* Catch-all */}
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </Container>
  );
}
import React from 'react'
import { useSelector, useDispatch } from 'react-redux'
import styled from 'styled-components'
import { removeFromCart, clearCart } from '../store/slices/cartSlice'
import { useNavigate } from 'react-router-dom'

const Container = styled.div`
  padding: 2rem;
`
const Title = styled.h1`
  margin-bottom: 1rem;
`
const List = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`
const Item = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
`
const Img = styled.img`
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 4px;
`
const Info = styled.div`
  flex: 1;
`
const Name = styled.div`
  font-weight: bold;
`
const Qty = styled.div`
  margin: 0.5rem 0;
`
const Price = styled.div`
  font-weight: bold;
`
const Actions = styled.div`
  margin-top: 2rem;
  display: flex;
  gap: 1rem;
`

export default function CartPage() {
  const { items, totalQty, totalPrice } = useSelector(state => state.cart)
  const dispatch = useDispatch()
  const navigate = useNavigate()

  const handleCheckout = () => {
    navigate('/checkout')
  }

  if (items.length === 0) {
    return (
      <Container>
        <Title>Your Cart is Empty</Title>
      </Container>
    )
  }

  return (
    <Container>
      <Title>Shopping Cart</Title>
      <List>
        {items.map(({ product, qty }) => (
          <Item key={product.id}>
            <Img src={product.image} alt={product.name} />
            <Info>
              <Name>{product.name}</Name>
              <Qty>Quantity: {qty}</Qty>
              <Price>â‚¬{(product.price * qty).toFixed(2)}</Price>
            </Info>
            <button onClick={() => dispatch(removeFromCart(product.id))}>
              Remove
            </button>
          </Item>
        ))}
      </List>
      <Actions>
        <div>
          <div>Total Items: {totalQty}</div>
          <div>Total Price: â‚¬{totalPrice.toFixed(2)}</div>
        </div>
        <button onClick={() => dispatch(clearCart())}>
          Clear Cart
        </button>
        <button onClick={handleCheckout}>
          Proceed to Checkout
        </button>
      </Actions>
    </Container>
  )
}
import React, { useEffect, useState, useMemo, useCallback } from 'react';
import styled from 'styled-components';
import api from '../api/api';
import ProductCard from '../components/products/ProductCard';
import Spinner from '../components/ui/Spinner';

/* ---------- layout ---------- */

const Page = styled.div`
  display: flex;
  gap: 2rem;
  padding: 2rem;
`;

const Sidebar = styled.aside`
  width: 240px;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
`;

const Main = styled.main`
  flex: 1;
  display: flex;
  flex-direction: column;
`;

/* ---------- typography ---------- */

const Heading = styled.h2`
  margin-bottom: 0.5rem;
  color: ${({ theme }) => theme.colors.text};
`;

/* ---------- lists ---------- */

const List = styled.ul`
  list-style: none;
  padding: 0;
`;

const ListItem = styled.li`
  margin: 0.5rem 0;
  cursor: pointer;
  color: ${({ $active, theme }) =>
    $active ? theme.colors.primary : theme.colors.text};
  transition: color 0.2s;

  &:hover {
    color: ${({ theme }) => theme.colors.primary};
  }
`;

/* ---------- buttons ---------- */

const TextButton = styled.button`
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  margin: 0.25rem 0;
  color: ${({ theme }) => theme.colors.text};
  font: inherit;
  text-align: left;
  transition: color 0.2s;

  &:hover {
    color: ${({ theme }) => theme.colors.primary};
  }
`;

/* ---------- inputs ---------- */

const SearchInput = styled.input`
  width: 100%;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid ${({ theme }) => theme.colors.border};
  margin-bottom: 1rem;
`;

/* ---------- grid ---------- */

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 1.5rem;
`;

/* ---------- component ---------- */

export default function CatalogPage() {
  /* data ------------------------------------------------------------------ */
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState(['All Products']);
  const [loading, setLoading] = useState(true);

  /* ui state -------------------------------------------------------------- */
  const [activeCategory, setActiveCategory] = useState('All Products');
  const [sort, setSort] = useState(null); // null | low | high | az | za
  const [searchQuery, setSearchQuery] = useState('');

  /* fetch data once ------------------------------------------------------- */
  useEffect(() => {
    (async () => {
      try {
        const [productRes, categoryRes] = await Promise.all([
          api.get('/products'),
          api.get('/categories'),
        ]);
        setProducts(productRes.data);
        setCategories(['All Products', ...categoryRes.data.map(c => c.name)]);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  /* derived list ---------------------------------------------------------- */
  const filteredProducts = useMemo(() => {
    let list = [...products];

    /* category filter */
    if (activeCategory !== 'All Products') {
      list = list.filter(p => p.category === activeCategory);
    }

    /* search filter */
    if (searchQuery.trim()) {
      const q = searchQuery.toLowerCase();
      list = list.filter(p => p.name.toLowerCase().includes(q));
    }

    /* sort */
    switch (sort) {
      case 'low':
        list.sort((a, b) => a.price - b.price);
        break;
      case 'high':
        list.sort((a, b) => b.price - a.price);
        break;
      case 'az':
        list.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case 'za':
        list.sort((a, b) => b.name.localeCompare(a.name));
        break;
      default:
        /* keep original order (assumed popularity) */
        break;
    }

    return list;
  }, [products, activeCategory, sort, searchQuery]);

  /* handlers -------------------------------------------------------------- */
  const resetFilters = useCallback(() => {
    setActiveCategory('All Products');
    setSort(null);
    setSearchQuery('');
  }, []);

  /* render ---------------------------------------------------------------- */
  if (loading) return <Spinner />;

  return (
    <Page>
      {/* ---------- sidebar ---------- */}
      <Sidebar>
        <section>
          <Heading>Categories</Heading>
          <List>
            {categories.map(cat => (
              <ListItem
                key={cat}
                $active={cat === activeCategory}
                onClick={() => {
                  setActiveCategory(cat);
                  setSort(null); // reset sorting on category change
                }}
              >
                {cat}
              </ListItem>
            ))}
          </List>
        </section>

        <section>
          <Heading>Sort by</Heading>
          <TextButton onClick={() => setSort(null)}>Popularity</TextButton>
          <TextButton onClick={() => setSort('low')}>Price: Low â†’ High</TextButton>
          <TextButton onClick={() => setSort('high')}>Price: High â†’ Low</TextButton>
          <TextButton onClick={() => setSort('az')}>Name: A â†’ Z</TextButton>
          <TextButton onClick={() => setSort('za')}>Name: Z â†’ A</TextButton>
        </section>

        <section>
          <TextButton onClick={resetFilters} aria-label="Reset filters">
            Reset Filters
          </TextButton>
        </section>
      </Sidebar>

      {/* ---------- main ---------- */}
      <Main>
        <Heading>Catalog</Heading>

        <label htmlFor="search" style={{ display: 'none' }}>
          Search products
        </label>
        <SearchInput
          id="search"
          type="text"
          placeholder="Search productsâ€¦"
          value={searchQuery}
          onChange={e => setSearchQuery(e.target.value)}
        />

        <div style={{ marginBottom: '1rem' }}>
          {filteredProducts.length} product
          {filteredProducts.length !== 1 && 's'} found
        </div>

        <Grid>
          {filteredProducts.map(product => (
            <ProductCard key={product.id} product={product} />
          ))}
        </Grid>
      </Main>
    </Page>
  );
}
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import styled from 'styled-components';
import { createOrder } from '../../store/slices/ordersSlice';
import { clearCart } from '../../store/slices/cartSlice';
import { useNavigate } from 'react-router-dom';

const Container = styled.div`
  padding: 2rem;
`;

const Title = styled.h1`
  margin-bottom: 1rem;
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`;

const Input = styled.input`
  padding: .5rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 4px;
`;

const Select = styled.select`
  padding: .5rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 4px;
`;

const Button = styled.button`
  padding: .75rem;
  background: ${({ theme }) => theme.colors.primary};
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:hover { opacity: .9; }
`;

export default function CheckoutPage() {
  const { items, totalPrice } = useSelector(state => state.cart);
  const { token } = useSelector(state => state.auth);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [shippingAddress, setShippingAddress] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('Credit Card');

  useEffect(() => {
    if (!token) {
      navigate('/login');
    }
  }, [token, navigate]);

  if (!token) {
    return null;
  }

  const handleSubmit = e => {
    e.preventDefault();
    const orderData = {
      orderItems: items.map(i => ({ productId: i.product.id, qty: i.qty })),
      shippingAddress,
      paymentMethod,
      totalPrice
    };
    dispatch(createOrder(orderData))
      .unwrap()
      .then(order => {
        dispatch(clearCart());
        navigate('/success', { state: { order } });
      });
  };

  return (
    <Container>
      <Title>Checkout</Title>
      <Form onSubmit={handleSubmit}>
        <label>
          Shipping Address
          <Input
            type="text"
            value={shippingAddress}
            onChange={e => setShippingAddress(e.target.value)}
            required
          />
        </label>
        <label>
          Payment Method
          <Select
            value={paymentMethod}
            onChange={e => setPaymentMethod(e.target.value)}
          >
            <option>Credit Card</option>
            <option>PayPal</option>
          </Select>
        </label>
        <div>Total: â‚¬{totalPrice.toFixed(2)}</div>
        <Button type="submit">Place Order</Button>
      </Form>
    </Container>
  );
}
// src/pages/checkout/SuccessPage.jsx
import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import Button from '../../components/ui/Button'; // Import the reusable Button component

// Styles using Styled Components for the page container
const Wrap = styled.div`
  padding: ${({ theme }) => theme.spacing(4)}; /* Adds padding based on theme */
  text-align: center; /* Centers the content */
  max-width: 600px; /* Limits width for better readability */
  margin: auto; /* Centers the page horizontally */
  background-color: ${({ theme }) => theme.colors.lightBg}; /* Light background from theme */
  border-radius: ${({ theme }) => theme.borderRadius}; /* Rounded borders */
  box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Shadow for depth */
  color: ${({ theme }) => theme.colors.text}; /* Text color */
`;

// Styles for the page title
const Title = styled.h1`
  font-size: 2.5rem; /* Font size for the title */
  color: ${({ theme }) => theme.colors.primary}; /* Primary theme color (orange) */
  margin-bottom: ${({ theme }) => theme.spacing(2)}; /* Space below the title */
`;

// Styles for the confirmation message
const Message = styled.p`
  font-size: 1.1rem; /* Font size for the message */
  margin-bottom: ${({ theme }) => theme.spacing(4)}; /* Space below the message */
  line-height: 1.6; /* Line height for readability */
`;

/**
 * SuccessPage Component
 * Displays an order confirmation message after a successful checkout.
 * Redirects the user to the homepage via a button.
 */
export default function SuccessPage() {
  return (
    <Wrap>
      <Title>Order Confirmed ðŸŽ‰</Title> {/* Confirmation title with emoji */}
      <Message>
        Thank you for your purchase! You will receive a confirmation email shortly with all the details of your order.
      </Message>
      {/* Link for "Back to Home" button */}
      <Link to="/">
        <Button>Back to Home</Button> {/* Uses the reusable Button component for redirection */}
      </Link>
    </Wrap>
  );
}
// src/pages/ContactPage.jsx
import React, { useState } from 'react';
import styled from 'styled-components';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import DateTimePicker from 'react-datetime-picker';
import 'react-calendar/dist/Calendar.css';
import 'react-datetime-picker/dist/DateTimePicker.css';
import { toast } from 'react-toastify';
import { FaUser, FaEnvelope, FaPhone } from 'react-icons/fa';

import Button from '../components/ui/Button';
import Input from '../components/ui/Input';

/* ------------------------------------------------------------------ */
/*  Styled                                                            */
/* ------------------------------------------------------------------ */
const ContactContainer = styled.div`
  padding: ${({ theme }) => theme.spacing(4)};
  max-width: 800px;
  margin: auto;
  background-color: ${({ theme }) => theme.colors.lightBg};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  color: ${({ theme }) => theme.colors.text};
`;

const Title = styled.h1`
  font-size: 2.5rem;
  color: ${({ theme }) => theme.colors.primary};
  margin-bottom: ${({ theme }) => theme.spacing(2)};
  text-align: center;
`;

const Subtitle = styled.p`
  font-size: 1.1rem;
  color: ${({ theme }) => theme.colors.textLight};
  margin-bottom: ${({ theme }) => theme.spacing(4)};
  text-align: center;
`;

const FormGrid = styled.form`
  display: grid;
  grid-template-columns: 1fr;
  gap: ${({ theme }) => theme.spacing(3)};
  @media (min-width: 768px) {
    grid-template-columns: 1fr 1fr;
  }
`;

const FullWidth = styled.div`
  grid-column: 1 / -1;
`;

const Select = styled.select`
  width: 100%;
  padding: 0.75rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: ${({ theme }) => theme.borderRadius};
  font: inherit;
  background: ${({ theme }) => theme.colors.surface};
  color: ${({ theme }) => theme.colors.text};
`;

const SelectLabel = styled.label`
  display: block;
  margin-bottom: 0.25rem;
  font-weight: 600;
`;

const DateTimeWrapper = styled(FullWidth)`
  .react-datetime-picker {
    width: 100%;
  }
  .react-calendar {
    border: 1px solid ${({ theme }) => theme.colors.border};
    border-radius: ${({ theme }) => theme.borderRadius};
    background: ${({ theme }) => theme.colors.surface};
    color: ${({ theme }) => theme.colors.text};
  }
  .react-datetime-picker__wrapper {
    border: 1px solid ${({ theme }) => theme.colors.border};
    border-radius: ${({ theme }) => theme.borderRadius};
    padding: 0.5rem;
  }
`;

/* ------------------------------------------------------------------ */
/*  Constants                                                         */
/* ------------------------------------------------------------------ */
const SUBJECTS = [
  'Product Inquiry',
  'Order Status',
  'Technical Support',
  'Return / Exchange',
  'Other',
];

const SERVICES = [
  'Maintenance',
  'Performance Tuning',
  'Custom Build',
  'Diagnostics',
  'Consultation',
];

/* ------------------------------------------------------------------ */
/*  Validation schema                                                 */
/* ------------------------------------------------------------------ */
const schema = yup.object({
  name: yup.string().max(100, 'Name cannot exceed 100 characters'),
  email: yup
    .string()
    .email('Invalid email format')
    .required('Email is required'),
  phone: yup
    .string()
    .required('Phone number is required')
    .matches(/^[0-9\s\-()+.ext]+$/, 'Invalid phone number format'),
  subject: yup.string().required('Please choose a subject'),
  service: yup.string().required('Please choose a service'),
  message: yup.string().max(500, 'Message cannot exceed 500 characters'),
});

/* ------------------------------------------------------------------ */
/*  Component                                                         */
/* ------------------------------------------------------------------ */
export default function ContactPage() {
  const [appointmentDate, setAppointmentDate] = useState(new Date());

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm({
    resolver: yupResolver(schema),
    defaultValues: {
      subject: SUBJECTS[0],
      service: SERVICES[0],
    },
  });

  const onSubmit = async (data) => {
    await new Promise((resolve) => {
      setTimeout(() => {
        console.log('Submitted:', {
          ...data,
          appointmentDate: appointmentDate.toISOString(),
        });
        toast.success('Thank you! We will contact you shortly.');
        reset();
        setAppointmentDate(new Date());
        resolve();
      }, 1500);
    });
  };

  return (
    <ContactContainer>
      <Title>Contact&nbsp;Us</Title>
      <Subtitle>
        Need help choosing a part or booking an appointment? Fill out the form
        and weâ€™ll assist you shortly.
      </Subtitle>

      <FormGrid onSubmit={handleSubmit(onSubmit)}>
        {/* ------------ Name ------------- */}
        <Input
          label="Your Name (Optional)"
          type="text"
          icon={<FaUser />}
          {...register('name')}
          error={errors.name?.message}
        />

        {/* ------------ Email ------------- */}
        <Input
          label="Email"
          type="email"
          icon={<FaEnvelope />}
          {...register('email')}
          error={errors.email?.message}
          required
        />

        {/* ------------ Phone ------------- */}
        <Input
          label="Phone Number"
          type="tel"
          icon={<FaPhone />}
          {...register('phone')}
          error={errors.phone?.message}
          required
        />

        {/* ------------ Subject ------------- */}
        <div>
          <SelectLabel htmlFor="subject">Subject</SelectLabel>
          <Select id="subject" {...register('subject')}>
            {SUBJECTS.map((opt) => (
              <option value={opt} key={opt}>
                {opt}
              </option>
            ))}
          </Select>
          {errors.subject && (
            <small style={{ color: 'red' }}>{errors.subject.message}</small>
          )}
        </div>

        {/* ------------ Service ------------- */}
        <div>
          <SelectLabel htmlFor="service">Service Required</SelectLabel>
          <Select id="service" {...register('service')}>
            {SERVICES.map((opt) => (
              <option value={opt} key={opt}>
                {opt}
              </option>
            ))}
          </Select>
          {errors.service && (
            <small style={{ color: 'red' }}>{errors.service.message}</small>
          )}
        </div>

        {/* ------------ Message ------------- */}
        <FullWidth>
          <SelectLabel htmlFor="message">
            Message / Appointment Details (Optional)
          </SelectLabel>
          <Input
            as="textarea"
            id="message"
            rows="4"
            {...register('message')}
            error={errors.message?.message}
          />
        </FullWidth>

        {/* ------------ Date-Time Picker ------------- */}
        <DateTimeWrapper>
          <SelectLabel>Preferred Appointment Date &amp; Time</SelectLabel>
          <DateTimePicker
            onChange={setAppointmentDate}
            value={appointmentDate}
            format="dd/MM/yyyy HH:mm"
            locale="en-GB"
            disableClock={false}
          />
        </DateTimeWrapper>

        {/* ------------ Submit ------------- */}
        <FullWidth>
          <Button type="submit" disabled={isSubmitting}>
            {isSubmitting ? 'Sendingâ€¦' : 'Submit Request'}
          </Button>
        </FullWidth>
      </FormGrid>
    </ContactContainer>
  );
}
// src/pages/HomePage.jsx  (ultima finitura)
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import styled, { keyframes } from 'styled-components';
import api from '../api/api';
import ProductCard from '../components/products/ProductCard';
import Spinner from '../components/ui/Spinner';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  HERO  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
const Container = styled.div`
  padding: 0;
`;

const Hero = styled.div`
  position: relative;
  height: 600px;            /* â¬†ï¸ piÃ¹ alto â†’ immagine quasi intera */
  overflow: hidden;
`;

const HeroImg = styled.img`
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: top center;   /* mostra bene la parte alta */
`;

const glow = keyframes`
  0%,100% { text-shadow: 0 0 6px rgba(255, 128, 0, .85),
                         0 0 12px rgba(255, 128, 0, .65); }
  50%     { text-shadow: 0 0 9px rgba(255, 150, 0, .95),
                         0 0 18px rgba(255, 150, 0, .75); }
`;

const Caption = styled.div`
  position: absolute;
  bottom: 3.5rem;
  left: 4rem;
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
`;

const HeroTitle = styled.h1`
  margin: 0;
  color: #fff;
  font-size: clamp(1.4rem, 3vw, 2.4rem);
  font-weight: 700;
  letter-spacing: 0.05em;
  animation: ${glow} 2.8s ease-in-out infinite;
`;

const ShopNowBtn = styled(Link)`
  align-self: flex-start;
  background: ${({ theme }) => theme.colors.primary};
  color: #fff;
  padding: 0.6rem 1.8rem;
  border-radius: 50px;
  font-weight: 600;
  text-decoration: none;
  transition: transform .2s, box-shadow .2s;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 12px rgba(0,0,0,.25);
  }
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  LISTE  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
const Content = styled.div`
  padding: 2rem;
`;

const Section = styled.section`
  margin-bottom: 3rem;
`;
const Title = styled.h2`
  margin-bottom: 1rem;
  color: ${({ theme }) => theme.colors.text};
`;
const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill,minmax(220px,1fr));
  gap: 1.5rem;
`;
/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */

export default function HomePage() {
  const [featured, setFeatured] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    api
      .get('/products?_limit=4&featured=true')
      .then(res => setFeatured(res.data))
      .catch(() => setFeatured([]))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <Spinner />;

  return (
    <Container>
      <Hero>
        <HeroImg
          src="/images/hero-scooter.jpg"
          alt="Scooter in front of Ridfix store"
        />

        <Caption>
          <HeroTitle>WELCOME&nbsp;TO&nbsp;RIDFIX&nbsp;SHOP</HeroTitle>
          <ShopNowBtn to="/catalog">SHOP&nbsp;NOW</ShopNowBtn>
        </Caption>
      </Hero>

      <Content>
        <Section>
          <Title>Featured Products</Title>
          <Grid>
            {featured.map(p => (
              <ProductCard key={p.id} product={p} />
            ))}
          </Grid>
        </Section>

        <Section>
          <Title>Shop by Category</Title>
          <p>Coming soonâ€¦</p>
        </Section>
      </Content>
    </Container>
  );
}
import React, { useState, useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useNavigate, Link } from 'react-router-dom'
import styled from 'styled-components'
import { loginUser } from '../store/slices/authSlice'
import Spinner from '../components/ui/Spinner'

const Container = styled.div`
  max-width: 400px;
  margin: 4rem auto;
  padding: 2rem;
  background: ${({ theme }) => theme.colors.cardBg};
  border-radius: 8px;
`
const Title = styled.h1`
  text-align: center;
  margin-bottom: 1.5rem;
`
const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`
const Input = styled.input`
  padding: .75rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 4px;
`
const Button = styled.button`
  padding: .75rem;
  background: ${({ theme }) => theme.colors.primary};
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:hover { opacity: .9; }
`
const Error = styled.div`
  color: #ff4d4f;
  font-size: .875rem;
  text-align: center;
`

export default function LoginPage() {
  const dispatch = useDispatch()
  const navigate = useNavigate()
  const { status, error, token } = useSelector(state => state.auth)

  // Local state per email e password
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  // Se giÃ  loggato, redirige alla home
  useEffect(() => {
    if (token) {
      navigate('/')
    }
  }, [token, navigate])

  // Al submit, dispatch dellâ€™azione di login
  const handleSubmit = e => {
    e.preventDefault()
    dispatch(loginUser({ email, password }))
  }

  return (
    <Container>
      <Title>Login</Title>
      {status === 'loading' && <Spinner />}
      <Form onSubmit={handleSubmit}>
        <Input
          type="email"
          placeholder="Email"
          value={email}
          onChange={e => setEmail(e.target.value)}
          required
        />
        <Input
          type="password"
          placeholder="Password"
          value={password}
          onChange={e => setPassword(e.target.value)}
          required
        />
        <Button type="submit">Sign In</Button>
      </Form>
      {status === 'failed' && <Error>{error}</Error>}
      <p style={{ marginTop: '1rem', textAlign: 'center' }}>
        New here? <Link to="/register">Register</Link>
      </p>
      <p style={{ fontSize: '0.85rem', color: '#888', textAlign: 'center', marginTop: '1rem' }}>
  Demo credentials â€“ Admin: <strong>admin@ridfix.io / admin123</strong>,&nbsp;
  User: <strong>user@ridfix.io / user123</strong>
</p>

    </Container>
  )
}
// src/pages/NotFoundPage.jsx
import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import Button from '../components/ui/Button'; // Assicurati che il percorso sia corretto

// Stili con Styled Components per il contenitore della pagina
const Wrap = styled.div`
  padding: ${({ theme }) => theme.spacing(4)}; /* Aggiunge padding basato sul tema */
  text-align: center; /* Centra il contenuto */
  max-width: 600px; /* Limita la larghezza per una migliore leggibilitÃ  */
  margin: auto; /* Centra la pagina orizzontalmente */
  background-color: ${({ theme }) => theme.colors.lightBg}; /* Utilizza un colore di sfondo dal tema se disponibile, altrimenti lightBg predefinito */
  border-radius: ${({ theme }) => theme.borderRadius}; /* Bordi arrotondati */
  box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Ombra per profonditÃ  */
  color: ${({ theme }) => theme.colors.text}; /* Colore del testo */
`;

// Stili per il titolo "404"
const Title = styled.h1`
  font-size: 4rem; /* Dimensione del font grande per il numero 404 */
  color: ${({ theme }) => theme.colors.primary}; /* Colore primario del tema (arancione) */
  margin-bottom: ${({ theme }) => theme.spacing(2)}; /* Spazio sotto il titolo */
`;

// Stili per il messaggio di errore
const Msg = styled.p`
  font-size: 1.2rem; /* Dimensione del font per il messaggio */
  margin-top: ${({ theme }) => theme.spacing(2)}; /* Spazio sopra il messaggio */
  margin-bottom: ${({ theme }) => theme.spacing(4)}; /* Spazio sotto il messaggio */
  line-height: 1.6; /* Altezza della linea per leggibilitÃ  */
`;

/**
 * Componente NotFoundPage
 * Visualizza una pagina di errore 404 per le rotte inesistenti.
 * Reindirizza l'utente alla homepage tramite un pulsante.
 */
export default function NotFoundPage() {
  return (
    <Wrap>
      <Title>404</Title> {/* Titolo principale della pagina di errore */}
      <Msg>Oopsâ€¦ Questa pagina non esiste.</Msg> {/* Messaggio di errore [1] */}
      {/* Link al pulsante "Torna alla Home" */}
      <Link to="/">
        <Button>Torna alla Home</Button> {/* Utilizza il componente Button per il reindirizzamento [1] */}
      </Link>
    </Wrap>
  );
}
// src/pages/Policy.jsx
import React from 'react';
import styled from 'styled-components';

const Container = styled.div`
  padding: ${({ theme }) => theme.spacing(4)};
  max-width: 800px;
  margin: auto;
  background-color: ${({ theme }) => theme.colors.lightBg};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  color: ${({ theme }) => theme.colors.text};
`;

const Title = styled.h1`
  font-size: 2.5rem;
  color: ${({ theme }) => theme.colors.primary};
  margin-bottom: ${({ theme }) => theme.spacing(3)};
  text-align: center;
`;

const Section = styled.section`
  margin-bottom: ${({ theme }) => theme.spacing(4)};
`;

const SectionTitle = styled.h2`
  font-size: 1.75rem;
  color: ${({ theme }) => theme.colors.text};
  margin-bottom: ${({ theme }) => theme.spacing(2)};
`;

const Paragraph = styled.p`
  font-size: 1rem;
  line-height: 1.6;
  margin-bottom: ${({ theme }) => theme.spacing(2)};
`;

export default function PolicyPage() {
  return (
    <Container>
      <Title>Policies & Legal Information</Title>

      <Section>
        <SectionTitle>1. Privacy Policy</SectionTitle>
        <Paragraph>
          At Ridfix we respect your privacy. We collect only the data strictly necessary to process orders
          and improve our services. This includes your name, shipping address, email, phone number, and payment details.
          Your data is used solely for order fulfillment, customer support, communication, and,
          if opted-in, for marketing updates. We guarantee your data is stored securely and
          is never sold to third parties, in compliance with GDPR and local regulations.
        </Paragraph>
      </Section>

      <Section>
        <SectionTitle>2. Terms & Conditions</SectionTitle>
        <Paragraph>
          By using the Ridfix website, you agree to these terms. All orders are subject to stock availability.
          Ridfix reserves the right to refuse or cancel any order for any reason, with a full refund provided
          if payment has already been made. It is the customer's responsibility to verify the compatibility
          of spare parts with their vehicle before installation. Ridfix is not liable for any damages arising
          from incorrect installation or incompatibility.
        </Paragraph>
      </Section>

      <Section>
        <SectionTitle>3. Warranty & Returns</SectionTitle>
        <Paragraph>
          All parts sold by Ridfix come with a 12-month warranty against manufacturing defects from the date of purchase.
          If a part is defective, please contact our support team with proof of purchase and images of the defect.
          Returns and exchanges are accepted within 14 days of delivery, provided the item is in its original condition
          and packaging. A pre-paid shipping label will be provided for approved returns.
        </Paragraph>
      </Section>

      <Section>
        <SectionTitle>4. Shipping Policy</SectionTitle>
        <Paragraph>
          Ridfix offers worldwide shipping. Estimated delivery times are 2-5 business days for domestic orders
          and 7-20 business days for international orders. Shipping is free for orders over â‚¬100 within the EU.
          Tracking details will be sent to your email once the order has shipped. Please note that customs duties
          and taxes for international shipments are the responsibility of the customer.
        </Paragraph>
      </Section>

      <Section>
        <SectionTitle>5. Cookie Policy</SectionTitle>
        <Paragraph>
          We use cookies and similar technologies to enhance your browsing experience, remember your preferences,
          and analyze site usage. By continuing to use our website, you consent to our use of cookies.
          You can manage your cookie preferences through your browser settings. Disabling non-essential cookies
          may affect certain functionalities, such as remembering items in your cart.
        </Paragraph>
      </Section>

      <Section>
        <SectionTitle>6. Contact Us</SectionTitle>
        <Paragraph>
          Questions or concerns about these policies? Reach out to our support team:
        </Paragraph>
        <Paragraph>
          <strong>Email:</strong> support@ridfix.com<br />
          <strong>Phone:</strong> +39 0123 456789
        </Paragraph>
      </Section>
    </Container>
  );
}
import React from 'react'
import styled from 'styled-components'
import { Link } from 'react-router-dom'

const Container = styled.div`
  padding: 4rem;
  text-align: center;
`

export default function NotFound() {
  return (
    <Container>
      <h1>404 â€“ Page Not Found</h1>
      <p>The page youâ€™re looking for doesnâ€™t exist.</p>
      <Link to="/">Back to Home</Link>
    </Container>
  )
}
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import styled from 'styled-components';
import { fetchUserProfile, clearUserProfile } from '../store/slices/usersSlice';

const Container = styled.div`
  padding: 2rem;
`;
const Title = styled.h1`
  margin-bottom: 1rem;
`;
const Info = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
`;

export default function ProfilePage() {
  const { profile, status } = useSelector(state => state.users);
  const dispatch = useDispatch();

  useEffect(() => {
    const email = localStorage.getItem('userEmail'); // oppure da auth state se hai login
    if (email) {
      dispatch(fetchUserProfile(email));
    }

    return () => dispatch(clearUserProfile());
  }, [dispatch]);

  if (status === 'loading') return <p>Loading...</p>;
  if (!profile) return <p>No profile found.</p>;

  return (
    <Container>
      <Title>My Profile</Title>
      <Info>
        <div><strong>Name:</strong> {profile.name}</div>
        <div><strong>Email:</strong> {profile.email}</div>
        <div><strong>Role:</strong> {profile.role || 'user'}</div>
      </Info>
    </Container>
  );
}
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { registerUser } from '../store/slices/usersSlice';
import Spinner from '../components/ui/Spinner';

const Container = styled.div`
  max-width: 400px;
  margin: 4rem auto;
  padding: 2rem;
  background: ${({ theme }) => theme.colors.cardBg};
  border-radius: 8px;
`;
const Title = styled.h1`
  text-align: center;
  margin-bottom: 1.5rem;
`;
const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`;
const Input = styled.input`
  padding: .75rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 4px;
`;
const Button = styled.button`
  padding: .75rem;
  background: ${({ theme }) => theme.colors.primary};
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:hover { opacity: .9; }
`;
const Error = styled.div`
  color: #ff4d4f;
  font-size: .875rem;
  text-align: center;
`;

export default function RegisterPage() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { status, error } = useSelector(state => state.users);

  // Local state per form
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  // Se registrazione andata a buon fine, redirect al login
  useEffect(() => {
    if (status === 'succeeded') {
      navigate('/login');
    }
  }, [status, navigate]);

  // Al submit, dispatch dellâ€™azione di register
  const handleSubmit = e => {
    e.preventDefault();
    dispatch(registerUser({ name, email, password }));
  };

  return (
    <Container>
      <Title>Register</Title>
      {status === 'loading' ? (
        <Spinner />
      ) : (
        <Form onSubmit={handleSubmit}>
          <Input
            type="text"
            placeholder="Name"
            value={name}
            onChange={e => setName(e.target.value)}
            required
          />
          <Input
            type="email"
            placeholder="Email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
          />
          <Input
            type="password"
            placeholder="Password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
          />
          <Button type="submit">Sign Up</Button>
        </Form>
      )}
      {status === 'failed' && error && <Error>{error}</Error>}
      <p style={{ marginTop: '1rem', textAlign: 'center' }}>
        Already have an account? <Link to="/login">Login</Link>
      </p>
    </Container>
  );
}
// src/pages/WishlistPage.jsx
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { fetchProducts } from '../store/slices/productsSlice';
import { removeFromWishlist } from '../store/slices/wishlistSlice';
import { addToCart } from '../store/slices/cartSlice';
import ProductCard from '../components/products/ProductCard';
import Spinner from '../components/ui/Spinner';    // se ne hai giÃ  uno

/* ---------- layout ---------- */
const Container = styled.div`
  padding: 2rem;
`;

const Title = styled.h1`
  margin-bottom: 1rem;
  color: ${({ theme }) => theme.colors.text};
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 1.3rem;
`;

const ActionBar = styled.div`
  margin-top: 0.6rem;
  display: flex;
  gap: 0.5rem;
  justify-content: center;
`;

const Btn = styled.button`
  background: ${({ theme, $grey }) => ($grey ? '#777' : theme.colors.primary)};
  color: #fff;
  border: none;
  padding: 0.45rem 1rem;
  border-radius: 30px;
  cursor: pointer;
  font-size: 0.85rem;

  &:hover {
    opacity: 0.9;
  }
`;

const Empty = styled.div`
  text-align: center;
  padding: 4rem 0;
  color: ${({ theme }) => theme.colors.textLight};
`;
/* ---------------------------- */

export default function WishlistPage() {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  /* wishlist ids */
  const wishlistIds = useSelector((s) => s.wishlist.items);

  /* products slice */
  const { items: products, status, error } = useSelector((s) => s.products);

  /* fetch only when idle */
  useEffect(() => {
    if (status === 'idle') dispatch(fetchProducts());
  }, [status, dispatch]);

  /* derive wishlist products */
  const wishlistProducts = products.filter((p) => wishlistIds.includes(p.id));

  /* loading state */
  if (status === 'loading') {
    return (
      <Container>
        <Title>Your Wishlist</Title>
        <Spinner />
      </Container>
    );
  }

  /* error state */
  if (status === 'failed') {
    return (
      <Container>
        <Title>Your Wishlist</Title>
        <Empty>
          <p>Could not load products: {error}</p>
          <Btn onClick={() => dispatch(fetchProducts())}>Retry</Btn>
        </Empty>
      </Container>
    );
  }

  /* empty wishlist */
  if (wishlistProducts.length === 0) {
    return (
      <Container>
        <Title>Your Wishlist</Title>
        <Empty>
          <p>Wishlist is empty.</p>
          <Btn onClick={() => navigate('/catalog')}>Browse products</Btn>
        </Empty>
      </Container>
    );
  }

  /* normal render */
  return (
    <Container>
      <Title>Your Wishlist</Title>
      <Grid>
        {wishlistProducts.map((p) => (
          <div key={p.id}>
            <ProductCard product={p} />

            <ActionBar>
              <Btn onClick={() => dispatch(addToCart(p))}>Add to cart</Btn>
              <Btn $grey onClick={() => dispatch(removeFromWishlist(p.id))}>
                Remove
              </Btn>
            </ActionBar>
          </div>
        ))}
      </Grid>
    </Container>
  );
}
/* ---------------------------------------------
 *  src/store/slices/authSlice.js
 *  â€“ gestione autenticazione + persistenza
 * --------------------------------------------*/
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import api from '../../api/api';
import { toast } from 'react-toastify';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Helpers: persistenza in localStorage
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const LS_KEY_STATE  = 'authState'; // stato completo (user, tokenâ€¦)
const LS_KEY_TOKEN  = 'token';     // token separato, usato dall'interceptor

const loadAuthState = () => {
  try {
    const stored = localStorage.getItem(LS_KEY_STATE);
    return stored ? JSON.parse(stored) : undefined;
  } catch (err) {
    console.error('Error loading auth state from localStorage:', err);
    return undefined;
  }
};

const saveAuthState = (state) => {
  try {
    localStorage.setItem(LS_KEY_STATE, JSON.stringify(state));
    // salviamo anche solo il token per lâ€™interceptor Axios
    if (state.token) localStorage.setItem(LS_KEY_TOKEN, state.token);
    else             localStorage.removeItem(LS_KEY_TOKEN);
  } catch (err) {
    console.error('Error saving auth state to localStorage:', err);
  }
};

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Stato iniziale
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const initialState = loadAuthState() || {
  user:            null,
  token:           null,
  isAuthenticated: false,
  status:          'idle',   // idle | loading | succeeded | failed
  error:           null,
};

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Thunk: LOGIN
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export const loginUser = createAsyncThunk(
  'auth/loginUser',
  async ({ email, password }, { rejectWithValue }) => {
    try {
      // JSON-Server: query utenti con email+password
      const { data } = await api.get(`/users`, {
        params: { email, password },
      });

      if (data.length === 0) {
        toast.error('Invalid credentials. Please try again.');
        return rejectWithValue('Invalid credentials');
      }

      const user = data[0]; // â† prendiamo il primo match
      const simulatedToken = `mock-token-${user.id}-${Math.random().toString(36).slice(2)}`;

      toast.success(`Welcome, ${user.name || user.email}!`);
      return { user, token: simulatedToken };
    } catch (err) {
      const message =
        err.response?.data?.message || 'Failed to login. Please try again.';
      toast.error(message);
      return rejectWithValue(message);
    }
  }
);

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Thunk: REGISTER  (endpoint corretto: /users)
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export const registerUser = createAsyncThunk(
  'auth/registerUser',
  async (newUser, { rejectWithValue }) => {
    try {
      const { data: createdUser } = await api.post('/users', newUser);
      toast.success('Registration successful. You can now log in.');
      return createdUser;
    } catch (err) {
      const message =
        err.response?.data?.message || 'Failed to register. Please try again.';
      toast.error(message);
      return rejectWithValue(message);
    }
  }
);

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  Slice
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    logout(state) {
      state.user = null;
      state.token = null;
      state.isAuthenticated = false;
      saveAuthState(state);
      toast.info('You have been logged out.');
    },
    setUserRole(state, action) {
      if (state.user) {
        state.user.role = action.payload;
        saveAuthState(state);
      }
    },
  },
  extraReducers: (builder) => {
    /* ----- LOGIN ----- */
    builder
      .addCase(loginUser.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, { payload }) => {
        state.status = 'succeeded';
        state.user = payload.user;
        state.token = payload.token;
        state.isAuthenticated = true;
        saveAuthState(state);
      })
      .addCase(loginUser.rejected, (state, { payload }) => {
        state.status = 'failed';
        state.error = payload;
        state.user = null;
        state.token = null;
        state.isAuthenticated = false;
        saveAuthState(state);
      });

    /* ----- REGISTER ----- */
    builder
      .addCase(registerUser.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(registerUser.fulfilled, (state) => {
        state.status = 'succeeded';
      })
      .addCase(registerUser.rejected, (state, { payload }) => {
        state.status = 'failed';
        state.error = payload;
      });
  },
});

export const { logout, setUserRole } = authSlice.actions;
export default authSlice.reducer;
// src/store/slices/cartSlice.js
import { createSlice } from '@reduxjs/toolkit';

/* Stato iniziale ---------------------------------------------------------- */
const initialState = {
  items: [],           // [{ id, name, price, qty, â€¦ }]
};

/* Helper ------------------------------------------------------------------ */
const normalizePayload = (payload) => {
  // accetta sia { id, â€¦ } che { product, qty }
  if (payload && payload.product) {
    return { product: payload.product, qty: payload.qty ?? 1 };
  }
  return { product: payload,       qty: payload.qty ?? 1 };
};

/* Slice ------------------------------------------------------------------- */
const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    /** Aggiunge un articolo (o incrementa la quantitÃ ) */
    addItem(state, action) {
      const { product, qty } = normalizePayload(action.payload);
      const existing = state.items.find((i) => i.id === product.id);

      if (existing) {
        existing.qty += qty;
      } else {
        state.items.push({ ...product, qty });
      }
    },

    /** Rimuove un articolo dal carrello */
    removeItem(state, action) {
      state.items = state.items.filter((i) => i.id !== action.payload);
    },

    /** Svuota completamente il carrello */
    clearCart(state) {
      state.items = [];
    },
  },
});

/* Export ------------------------------------------------------------------ */
export const { addItem, removeItem, clearCart } = cartSlice.actions;
/** Alias per compatibilitÃ  con i componenti esistenti */
export const addToCart = addItem;

export default cartSlice.reducer;
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  category: '',
  brand: '',
  minPrice: 0,
  maxPrice: 500,
  inStockOnly: false,
  search: '',
  sortBy: '',
};

const filtersSlice = createSlice({
  name: 'filters',
  initialState,
  reducers: {
    setFilter: (state, action) => {
      return { ...state, ...action.payload };
    },
    resetFilters: () => initialState,
  },
});

export const { setFilter, resetFilters } = filtersSlice.actions;
export default filtersSlice.reducer;
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import api from '../../api/api';
import { toast } from 'react-toastify';

// ðŸ“¦ Fetch all orders (admin or user profile view)
export const fetchOrders = createAsyncThunk(
  'orders/fetchOrders',
  async (_, { rejectWithValue }) => {
    try {
      const res = await api.get('/orders');
      return res.data;
    } catch (err) {
      toast.error('Failed to fetch orders');
      return rejectWithValue(err.message);
    }
  }
);

// ðŸ§¾ Create a new order (checkout)
export const createOrder = createAsyncThunk(
  'orders/createOrder',
  async (order, { rejectWithValue }) => {
    try {
      const res = await api.post('/orders', order);
      toast.success('Order created successfully!');
      return res.data;
    } catch (err) {
      toast.error('Failed to create order');
      return rejectWithValue(err.message);
    }
  }
);

// âŒ Delete an order (admin)
export const deleteOrder = createAsyncThunk(
  'orders/deleteOrder',
  async (orderId, { rejectWithValue }) => {
    try {
      await api.delete(`/orders/${orderId}`);
      toast.success('Order deleted');
      return orderId;
    } catch (err) {
      toast.error('Failed to delete order');
      return rejectWithValue(err.message);
    }
  }
);

// ðŸ”§ Slice definition
const ordersSlice = createSlice({
  name: 'orders',
  initialState: {
    items: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchOrders.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(fetchOrders.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchOrders.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      })

      .addCase(createOrder.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(createOrder.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items.push(action.payload);
      })
      .addCase(createOrder.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      })

      .addCase(deleteOrder.fulfilled, (state, action) => {
        state.items = state.items.filter(order => order.id !== action.payload);
      });
  },
});

export default ordersSlice.reducer;
import { createSlice } from '@reduxjs/toolkit';

/**
 * Stato iniziale:
 * - currentPage: numero di pagina attualmente visualizzata
 * - totalPages:  quante pagine esistono in totale (viene aggiornato dopo ogni fetch)
 * - pageSize:    quanti elementi mostri per pagina (utile per cambiare densitÃ )
 */
const initialState = {
  currentPage: 1,
  totalPages: 1,
  pageSize: 12,
};

const paginationSlice = createSlice({
  name: 'pagination',
  initialState,
  reducers: {
    /** Imposta la pagina corrente (1-based). */
    setPage(state, { payload }) {
      state.currentPage = payload;
    },
    /** Aggiorna il numero totale di pagine (es. dopo una nuova ricerca). */
    setTotalPages(state, { payload }) {
      state.totalPages = payload;
    },
    /** Facoltativo: cambia il numero di elementi per pagina. */
    setPageSize(state, { payload }) {
      state.pageSize = payload;
    },
    /** Riporta la paginazione allo stato iniziale (utile nei reset dei filtri). */
    resetPagination: () => initialState,
  },
});

export const {
  setPage,
  setTotalPages,
  setPageSize,
  resetPagination,
} = paginationSlice.actions;

export default paginationSlice.reducer;
/* ------------------------------------------------------------
 *  src/store/slices/productsSlice.js
 *  â€“ gestione prodotti, brand e prodotto selezionato
 * -----------------------------------------------------------*/
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import api   from '../../api/api';
import { toast } from 'react-toastify';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  1. Helper â€“ costruisci query string da filtri
 *     â€¢ correzione filtro â€œsolo disponibiliâ€
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
function buildProductsQueryParams(filters = {}) {
  const params = new URLSearchParams();

  if (filters.category) params.append('category', filters.category);
  if (filters.brand)    params.append('brand', filters.brand);
  if (filters.minPrice) params.append('price_gte', filters.minPrice);
  if (filters.maxPrice) params.append('price_lte', filters.maxPrice);
  if (filters.search)   params.append('q', filters.search);

  /* âœ… usa _gte=1 per simulare â€œsolo prodotti con stock â‰¥ 1â€ */
  if (filters.inStockOnly) params.append('inStock_gte', '1');

  if (filters.sortBy) {
    let order     = 'asc';
    let sortField = filters.sortBy;

    if (sortField.endsWith('_desc')) {
      sortField = sortField.replace('_desc', '');
      order = 'desc';
    } else if (sortField.endsWith('_asc')) {
      sortField = sortField.replace('_asc', '');
      order = 'asc';
    }
    params.append('_sort',  sortField);
    params.append('_order', order);
  }

  return params;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  2. Helper â€“ normalizza formato prodotto
 *     â€¢  inStock â‡† countInStock
 *     â€¢  numReviews
 *     â€¢  featured â†’ isDiscounted
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
function normalizeProduct(raw) {
  const p = { ...raw };

  /* ðŸ”„ 2.1 unifica nomenclatura stock */
  if (p.countInStock === undefined && p.inStock !== undefined) {
    p.countInStock = p.inStock;
  }
  if (p.inStock === undefined && p.countInStock !== undefined) {
    p.inStock = p.countInStock;
  }

  /* ðŸ”¢ 2.2 calcola numero recensioni */
  p.numReviews = Array.isArray(p.reviews) ? p.reviews.length : 0;

  /* ðŸ’° 2.3 featured â†’ isDiscounted + prezzo promo */
  if (p.featured === true && p.isDiscounted === undefined) {
    p.isDiscounted = true;
    if (p.discountPrice === undefined) {
      p.discountPrice = +(p.price * 0.9).toFixed(2); // â€“10 %
    }
  }

  return p;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  3. Async thunk: fetch lista prodotti
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export const fetchProducts = createAsyncThunk(
  'products/fetchProducts',
  async (filters, { rejectWithValue }) => {
    try {
      const params   = buildProductsQueryParams(filters);
      const { data } = await api.get(`/products?${params.toString()}`);

      return data.map(normalizeProduct);
    } catch (err) {
      const msg =
        err.response?.data?.message || 'Failed to fetch products.';
      toast.error(msg);
      return rejectWithValue(msg);
    }
  }
);

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  4. Async thunk: fetch singolo prodotto
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export const fetchProductById = createAsyncThunk(
  'products/fetchProductById',
  async (id, { rejectWithValue }) => {
    try {
      const { data } = await api.get(`/products/${id}`);
      return normalizeProduct(data);
    } catch (err) {
      const msg =
        err.response?.data?.message ||
        `Failed to fetch product with ID ${id}.`;
      toast.error(msg);
      return rejectWithValue(msg);
    }
  }
);

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  5. Async thunk: brand list (per i filtri)
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export const fetchBrands = createAsyncThunk(
  'products/fetchBrands',
  async (_, { rejectWithValue }) => {
    try {
      const { data } = await api.get('/brands');
      return data;
    } catch (err) {
      const msg =
        err.response?.data?.message || 'Failed to fetch brands.';
      toast.error(msg);
      return rejectWithValue(msg);
    }
  }
);

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  6. Stato iniziale
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const initialState = {
  items:           [],
  brands:          [],
  selectedProduct: null,
  status:          'idle',
  error:           null,
  brandsStatus:    'idle',
  brandsError:     null,
};

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  7. Slice
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
const productsSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {
    setSelectedProduct(state, { payload }) {
      state.selectedProduct = payload;
    },
    clearSelectedProduct(state) {
      state.selectedProduct = null;
    },

    /* CRUD locale demo */
    addProduct(state, { payload }) {
      state.items.push(normalizeProduct(payload));
      toast.success('Product added successfully!');
    },
    updateProduct(state, { payload }) {
      const idx = state.items.findIndex((p) => p.id === payload.id);
      if (idx !== -1) {
        state.items[idx] = normalizeProduct(payload);
        toast.success('Product updated successfully!');
      }
    },
    deleteProduct(state, { payload: id }) {
      state.items = state.items.filter((p) => p.id !== id);
      toast.success('Product deleted successfully!');
    },
  },

  extraReducers: (builder) => {
    /* fetchProducts */
    builder
      .addCase(fetchProducts.pending,  (s) => { s.status = 'loading';   s.error = null;       })
      .addCase(fetchProducts.fulfilled,(s,{payload}) => { s.status='succeeded'; s.items=payload; })
      .addCase(fetchProducts.rejected, (s,{payload}) => { s.status='failed';    s.error=payload; s.items=[];});

    /* fetchProductById */
    builder
      .addCase(fetchProductById.pending,  (s) => { s.status='loading'; s.error=null; s.selectedProduct=null; })
      .addCase(fetchProductById.fulfilled,(s,{payload}) => { s.status='succeeded'; s.selectedProduct=payload; })
      .addCase(fetchProductById.rejected, (s,{payload}) => { s.status='failed';    s.error=payload; s.selectedProduct=null; });

    /* fetchBrands */
    builder
      .addCase(fetchBrands.pending,  (s) => { s.brandsStatus='loading'; s.brandsError=null; })
      .addCase(fetchBrands.fulfilled,(s,{payload}) => { s.brandsStatus='succeeded'; s.brands=payload; })
      .addCase(fetchBrands.rejected, (s,{payload}) => { s.brandsStatus='failed';    s.brandsError=payload; });
  },
});

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *  8. Export
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
export const {
  setSelectedProduct,
  clearSelectedProduct,
  addProduct,
  updateProduct,
  deleteProduct,
} = productsSlice.actions;

export default productsSlice.reducer;

/* Facoltativo: helper per test */
export { buildProductsQueryParams };
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import api from '../../api/api';
import { toast } from 'react-toastify';

// ðŸ” REGISTER USER (fake async)
export const registerUser = createAsyncThunk(
  'users/registerUser',
  async (userData, { rejectWithValue }) => {
    try {
      const res = await api.post('/users', userData);
      toast.success('User registered successfully');
      return res.data;
    } catch (err) {
      toast.error('Registration failed');
      return rejectWithValue(err.message);
    }
  }
);

// ðŸ‘¤ FETCH USER PROFILE by email (mocked)
export const fetchUserProfile = createAsyncThunk(
  'users/fetchUserProfile',
  async (email, { rejectWithValue }) => {
    try {
      const res = await api.get(`/users?email=${email}`);
      if (res.data.length === 0) {
        throw new Error('User not found');
      }
      return res.data[0]; // Assumes unique email
    } catch (err) {
      toast.error('Profile fetch failed');
      return rejectWithValue(err.message);
    }
  }
);

// ðŸ”§ Initial state
const initialState = {
  profile: null,
  status: 'idle',
  error: null,
};

const usersSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {
    clearUserProfile(state) {
      state.profile = null;
      state.status = 'idle';
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(registerUser.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(registerUser.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.profile = action.payload;
      })
      .addCase(registerUser.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      })

      .addCase(fetchUserProfile.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(fetchUserProfile.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.profile = action.payload;
      })
      .addCase(fetchUserProfile.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      });
  },
});

// âœ… EXPORTS
export const { clearUserProfile } = usersSlice.actions;
export default usersSlice.reducer;
// src/store/slices/wishlistSlice.js
import { createSlice } from '@reduxjs/toolkit';
import { toast } from 'react-toastify';

/* ------------------------------------------------------------------ */
/*  Helpers: load / save da localStorage                              */
/* ------------------------------------------------------------------ */
const loadIds = () => {
  try {
    const raw = localStorage.getItem('wishlistIds');
    return raw ? JSON.parse(raw) : [];
  } catch {
    return [];
  }
};

const saveIds = (ids) => {
  try {
    localStorage.setItem('wishlistIds', JSON.stringify(ids));
  } catch (err) {
     
    console.error('Wishlist save error:', err);
  }
};

/* ------------------------------------------------------------------ */
/*  Initial state                                                     */
/* ------------------------------------------------------------------ */
const initialState = {
  ids: loadIds(), // array di numeri
};

/* ------------------------------------------------------------------ */
/*  Slice                                                             */
/* ------------------------------------------------------------------ */
const wishlistSlice = createSlice({
  name: 'wishlist',
  initialState,
  reducers: {
    /* Add / remove toggle -------------------------------------------- */
    toggleWishlist(state, action) {
      const payload = action.payload;
      const id = typeof payload === 'object' ? payload.id : payload;

      if (state.ids.includes(id)) {
        state.ids = state.ids.filter((x) => x !== id);
        toast.info('Removed from wishlist.');
      } else {
        state.ids.push(id);
        toast.success('Added to wishlist.');
      }
      saveIds(state.ids);
    },

    /* Remove explicit ------------------------------------------------ */
    removeFromWishlist(state, action) {
      const id = action.payload;
      if (state.ids.includes(id)) {
        state.ids = state.ids.filter((x) => x !== id);
        toast.info('Item removed from wishlist.');
        saveIds(state.ids);
      }
    },

    /* Clear all ------------------------------------------------------ */
    clearWishlist(state) {
      state.ids = [];
      saveIds(state.ids);
      toast.success('Wishlist cleared.');
    },
  },
});


export const selectWishlistIds = (state) => state.wishlist.ids;

export const {
  toggleWishlist,
  removeFromWishlist,
  clearWishlist,
} = wishlistSlice.actions;

export default wishlistSlice.reducer;
// src/store/store.js
import { configureStore, combineReducers } from '@reduxjs/toolkit';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  slices  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
import authReducer      from './slices/authSlice';
import productsReducer  from './slices/productsSlice';
import cartReducer      from './slices/cartSlice';
import wishlistReducer  from './slices/wishlistSlice';
import ordersReducer    from './slices/ordersSlice';
import usersReducer     from './slices/usersSlice';

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  root reducer  â”€â”€â”€â”€â”€â”€â”€ */
const rootReducer = combineReducers({
  auth:      authReducer,
  products:  productsReducer,
  cart:      cartReducer,
  wishlist:  wishlistReducer,
  orders:    ordersReducer,
  users:     usersReducer,
});

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  persist config  â”€â”€â”€â”€â”€ */
const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['auth', 'cart', 'wishlist'],   // â¬…ï¸ ciÃ² che vuoi salvare
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  store  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
const store = configureStore({
  reducer: persistedReducer,
  // middleware default di RTK giÃ  include thunk + serializableCheck
  // serializableCheck ignora redux-persist di default, quindi OK
});

export const persistor = persistStore(store);
export default store;
import { createGlobalStyle } from 'styled-components';

// GlobalStyle Ã¨ un componente di styled-components che permette di definire
// stili CSS che saranno iniettati globalmente nel documento.
const GlobalStyle = createGlobalStyle`
  /* CSS Reset di base per garantire una visualizzazione coerente su tutti i browser */
  *,
  *::before,
  *::after {
    box-sizing: border-box; /* Include padding e border nella dimensione totale dell'elemento */
  }

  /* Impostazioni globali per HTML e Body */
  html {
    font-size: 16px; /* Definisce la dimensione base del font, tutte le unitÃ  'rem' saranno relative a questa */
  }

  body {
    margin: 0; /* Rimuove i margini di default del body */
    padding: 0; /* Rimuove il padding di default del body */
    /* Applica i colori di background e testo dal tema, con una transizione fluida */
    background: ${({ theme }) => theme.colors.background};
    color: ${({ theme }) => theme.colors.text};
    /* Applica il font principale per il corpo del testo e l'altezza della linea */
    font-family: ${({ theme }) => theme.typography.fontFamilySecondary};
    line-height: 1.5; /* Altezza della linea per una migliore leggibilitÃ  */
    -webkit-font-smoothing: antialiased; /* Migliora il rendering del font su WebKit */
    -moz-osx-font-smoothing: grayscale; /* Migliora il rendering del font su Firefox */
    transition: background ${({ theme }) => theme.transitions.ease}, color ${({ theme }) => theme.transitions.ease}; /* Transizioni fluide per cambio tema */
  }

  /* Stili per i link */
  a {
    color: inherit; /* I link ereditano il colore del testo circostante */
    text-decoration: none; /* Rimuove la sottolineatura di default */
    cursor: pointer; /* Indica che l'elemento Ã¨ cliccabile */
    transition: color ${({ theme }) => theme.transitions.ease}; /* Transizione fluida al passaggio del mouse */
  }

  a:hover {
    color: ${({ theme }) => theme.colors.primaryLight}; /* Cambia colore al passaggio del mouse */
  }

  /* Stili per le immagini */
  img {
    max-width: 100%; /* Le immagini non superano la larghezza del loro contenitore */
    height: auto; /* Mantiene le proporzioni */
    display: block; /* Rimuove lo spazio extra sotto le immagini (se sono inline) */
  }

  /* Stili per elementi interattivi al focus (accessibilitÃ ) */
  /* Questo assicura che gli elementi siano visibili quando navigati tramite tastiera */
  button,
  input,
  select,
  textarea {
    &:focus {
      outline: 2px solid ${({ theme }) => theme.colors.primary}; /* Bordo solido arancione al focus */
      outline-offset: 2px; /* Spazio tra il bordo e l'elemento */
      border-color: ${({ theme }) => theme.colors.primary}; /* Cambia colore del bordo (se presente) */
      box-shadow: 0 0 0 3px rgba(255, 76, 0, 0.3); /* Aggiunge un'ombra per maggiore visibilitÃ  */
    }
  }

  /* Stili per il div root dell'applicazione */
  #root {
    display: flex; /* Utilizza flexbox per il layout principale */
    flex-direction: column; /* Imposta la direzione del layout in colonna */
    min-height: 100vh; /* Assicura che il root occupi almeno l'intera altezza della viewport */
  }

  /* Stili per i titoli (utilizzando il font Poppins) */
  h1, h2, h3, h4, h5, h6 {
    font-family: ${({ theme }) => theme.typography.fontFamilyPrimary};
    color: ${({ theme }) => theme.colors.textLight};
    margin-top: ${({ theme }) => theme.spacing(3)};
    margin-bottom: ${({ theme }) => theme.spacing(2)};
  }

  /* Stili generici per contenitori o sezioni */
  section {
    padding: ${({ theme }) => theme.spacing(4)} 0; /* Padding verticale standard per le sezioni */
  }

  /* Stili per i container di larghezza fissa o massima */
  .container {
    max-width: 1200px; /* Larghezza massima del contenuto */
    margin: 0 auto; /* Centra il contenitore */
    padding: 0 ${({ theme }) => theme.spacing(2)}; /* Padding orizzontale */

    /* Media query per tablet e mobile */
    @media (max-width: ${({ theme }) => theme.breakpoints.lg}) {
      max-width: 960px;
    }
    @media (max-width: ${({ theme }) => theme.breakpoints.md}) {
      max-width: 720px;
    }
    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {
      padding: 0 ${({ theme }) => theme.spacing(1)};
    }
  }
`;

export default GlobalStyle;
// Questo file definisce il tema globale dell'applicazione utilizzando styled-components.
// Contiene la palette di colori, le impostazioni di spaziatura, la tipografia e altro.
// Ãˆ progettato per supportare una modalitÃ  scura (Dark Mode) con accenti arancioni.

const theme = {
  // Colori principali per il tema scuro con accenti arancioni
  colors: {
    // Colori di base dello sfondo e delle superfici (seguono Material Design Dark Theme)
    background: '#121212', // Sfondo principale scuro
    surface: '#1E1E1E',    // Colore delle schede, card, modali (leggermente piÃ¹ chiaro del background)
    surfaceDark: '#0A0A0A', // Colore per elementi molto scuri o in profonditÃ 
    surfaceLight: '#2A2A2A', // Colore per elementi leggermente piÃ¹ chiari, es. hover su liste

    // Colori del testo per garantire leggibilitÃ  sul tema scuro
    text: '#E0E0E0',      // Testo primario (molto chiaro)
    textSecondary: '#B0B0B0', // Testo secondario (leggermente meno prominente)
    textLight: '#FFFFFF', // Testo bianco puro per contrasto massimo
    textDark: '#000000', // Testo nero puro (usato raramente in dark mode, ma utile per certi elementi)

    // Colori degli accenti e interattivi (arancione brand Ridfix)
    primary: '#FF4C00',   // Arancione primario (usato per bottoni, link attivi, highlights)
    primaryDark: '#D43F00', // Arancione piÃ¹ scuro per stati hover/active
    primaryLight: '#FF7033', // Arancione piÃ¹ chiaro per sfumature o sottili accenti

    // Colori di feedback per stati (successo, errore, avviso)
    success: '#4CAF50',   // Verde per successo
    error: '#F44336',     // Rosso per errore
    warning: '#FFC107',   // Giallo per avviso
    info: '#2196F3',      // Blu per informazioni

    // Colori per bordi e separatori
    border: '#424242',    // Colore dei bordi sottili e divisori
    divider: '#333333',   // Colore per linee divisorie piÃ¹ evidenti

    // Colore per gli stati di disabled
    disabled: '#616161',  // Colore per elementi disabilitati
  },

  // Spaziature (sistema modulare basato su una griglia di 8px)
  // Questo rende il design coerente e scalabile.
  spacing: (factor = 1) => `${factor * 8}px`, // Funzione helper per ottenere spaziatura in base a un fattore
  // Esempio d'uso: padding: ${theme.spacing(2)}; => 16px

  // Tipografia (font families, sizes, weights)
  typography: {
    fontFamilyPrimary: "'Poppins', sans-serif", // Per titoli e elementi prominenti
    fontFamilySecondary: "'Inter', sans-serif", // Per testi di corpo, paragrafi

    // Dimensioni dei font (scala modulare)
    fontSize: {
      xs: '0.75rem',  // 12px
      sm: '0.875rem', // 14px
      md: '1rem',     // 16px (base)
      lg: '1.125rem', // 18px
      xl: '1.25rem',  // 20px
      h1: '3rem',     // 48px
      h2: '2.25rem',   // 36px
      h3: '1.75rem',   // 28px
      h4: '1.5rem',    // 24px
      h5: '1.25rem',   // 20px
      h6: '1rem',      // 16px
    },
    fontWeight: {
      light: 300,
      regular: 400,
      medium: 500,
      semiBold: 600,
      bold: 700,
    },
  },

  // Bordi e ombre
  borderRadius: '8px', // Raggio standard per angoli arrotondati
  boxShadow: {
    sm: '0px 1px 3px rgba(0, 0, 0, 0.2)',
    md: '0px 4px 6px rgba(0, 0, 0, 0.3)',
    lg: '0px 10px 15px rgba(0, 0, 0, 0.4)',
  },

  // Breakpoints per il responsive design (mobile-first)
  breakpoints: {
    sm: '576px',  // Piccolo mobile
    md: '768px',  // Tablet o mobile grande
    lg: '992px',  // Desktop piccolo
    xl: '1200px', // Desktop grande
  },

  // Transizioni standard per effetti fluidi
  transitions: {
    ease: 'all 0.3s ease-in-out',
  },
};

export default theme; // Esporta il tema per l'uso con ThemeProvider
// Questo file contiene una funzione di utilitÃ  per il "debouncing".
// Il debouncing Ã¨ una tecnica per ritardare l'esecuzione di una funzione
// fino a quando non Ã¨ trascorso un certo periodo di tempo senza che la funzione sia stata richiamata.
// Ãˆ utile per eventi che si verificano molto frequentemente, come la digitazione in un campo di ricerca.

// La funzione `debounce` prende due argomenti:
// - `func`: la funzione che si vuole "debounce"
// - `delay`: il tempo (in millisecondi) di attesa prima di eseguire la funzione
export const debounce = (func, delay) => {
  let timeoutId; // Variabile per tenere traccia del timer

  // Restituisce una nuova funzione che sarÃ  quella effettivamente richiamata
  return (...args) => {
    // Ogni volta che la funzione debounced viene richiamata:
    // 1. Cancella il timer precedente (se esiste)
    clearTimeout(timeoutId);

    // 2. Imposta un nuovo timer
    timeoutId = setTimeout(() => {
      // Dopo il `delay`, esegue la funzione originale con gli argomenti passati
      func.apply(this, args); // `apply` mantiene il contesto `this` e passa gli argomenti come array
    }, delay);
  };
};
// Questo file contiene una funzione di utilitÃ  per formattare i prezzi.

// Esporta la funzione di default per la formattazione dei prezzi.
// Prende un valore numerico 'cents' (prezzo in centesimi) e lo converte in una stringa formattata.
export default function formatPrice(cents) {
  // Utilizza l'API Intl.NumberFormat per formattare il numero come valuta.
  // 'en-US' per un formato americano, ma possiamo cambiare a 'en-GB' o 'it-IT' per EUR.
  return new Intl.NumberFormat('en-US', {
    style: 'currency',   // Specifica che il formato Ã¨ per una valuta
    currency: 'EUR',     // Specifica la valuta (Euro)
  }).format(cents / 100); // Converte i centesimi in euro (divide per 100) e formatta.
}
